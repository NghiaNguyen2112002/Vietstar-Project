

Microchip Technology PIC LITE Macro Assembler V1.36 build -262312587 
                                                                                               Sat Dec 10 23:04:23 2022

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     	;# 
    39  0001                     	;# 
    40  0002                     	;# 
    41  0003                     	;# 
    42  0004                     	;# 
    43  0005                     	;# 
    44  0006                     	;# 
    45  000A                     	;# 
    46  000B                     	;# 
    47  000C                     	;# 
    48  000E                     	;# 
    49  000E                     	;# 
    50  000F                     	;# 
    51  0010                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0015                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0017                     	;# 
    58  0018                     	;# 
    59  0019                     	;# 
    60  001A                     	;# 
    61  001F                     	;# 
    62  0081                     	;# 
    63  0085                     	;# 
    64  0086                     	;# 
    65  008C                     	;# 
    66  008E                     	;# 
    67  0092                     	;# 
    68  0098                     	;# 
    69  0099                     	;# 
    70  009A                     	;# 
    71  009B                     	;# 
    72  009C                     	;# 
    73  009D                     	;# 
    74  009F                     	;# 
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000E                     	;# 
    86  000E                     	;# 
    87  000F                     	;# 
    88  0010                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0015                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  008C                     	;# 
   103  008E                     	;# 
   104  0092                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009F                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  001A                     	;# 
   135  001F                     	;# 
   136  0081                     	;# 
   137  0085                     	;# 
   138  0086                     	;# 
   139  008C                     	;# 
   140  008E                     	;# 
   141  0092                     	;# 
   142  0098                     	;# 
   143  0099                     	;# 
   144  009A                     	;# 
   145  009B                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009F                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000E                     	;# 
   160  000E                     	;# 
   161  000F                     	;# 
   162  0010                     	;# 
   163  0011                     	;# 
   164  0012                     	;# 
   165  0015                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0017                     	;# 
   169  0018                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001F                     	;# 
   173  0081                     	;# 
   174  0085                     	;# 
   175  0086                     	;# 
   176  008C                     	;# 
   177  008E                     	;# 
   178  0092                     	;# 
   179  0098                     	;# 
   180  0099                     	;# 
   181  009A                     	;# 
   182  009B                     	;# 
   183  009C                     	;# 
   184  009D                     	;# 
   185  009F                     	;# 
   186                           
   187                           	psect	idataBANK0
   188  02E3                     __pidataBANK0:	
   189                           
   190                           ;initializer for _LcdScreen
   191  02E3  3430               	retlw	48
   192  02E4  3431               	retlw	49
   193  02E5  3432               	retlw	50
   194  02E6  3433               	retlw	51
   195  02E7  3434               	retlw	52
   196  02E8  3435               	retlw	53
   197  02E9  3436               	retlw	54
   198  02EA  3437               	retlw	55
   199  02EB  3438               	retlw	56
   200  02EC  3439               	retlw	57
   201  02ED  3430               	retlw	48
   202  02EE  3431               	retlw	49
   203  02EF  3432               	retlw	50
   204  02F0  3433               	retlw	51
   205  02F1  3434               	retlw	52
   206  02F2  3435               	retlw	53
   207  02F3  3436               	retlw	54
   208  02F4  3437               	retlw	55
   209  02F5  3438               	retlw	56
   210  02F6  3439               	retlw	57
   211  02F7  3430               	retlw	48
   212  02F8  3431               	retlw	49
   213  02F9  3432               	retlw	50
   214  02FA  3433               	retlw	51
   215  02FB  3434               	retlw	52
   216  02FC  3435               	retlw	53
   217  02FD  3436               	retlw	54
   218  02FE  3437               	retlw	55
   219  02FF  3438               	retlw	56
   220  0300  3439               	retlw	57
   221  0301  3430               	retlw	48
   222  0302  3431               	retlw	49
   223                           
   224                           ;initializer for _time1_MUL
   225  0303  3401               	retlw	1
   226  0304  3400               	retlw	0
   227  000E                     _TMR1	set	14
   228  001F                     _CMCON	set	31
   229  000B                     _INTCONbits	set	11
   230  0006                     _PORTB	set	6
   231  0010                     _T1CONbits	set	16
   232  005F                     _GIE	set	95
   233  005E                     _PEIE	set	94
   234  0060                     _TMR1IF	set	96
   235  008E                     _PCONbits	set	142
   236  0086                     _TRISB	set	134
   237  0460                     _TMR1IE	set	1120
   238                           
   239                           	psect	strings
   240  0251                     __pstrings:	
   241  0251                     stringtab:	
   242  0251                     __stringtab:	
   243  0251                     stringcode:	
   244                           ;	String table - string pointers are 1 byte each
   245                           
   246  0251                     stringdir:	
   247  0251  3002               	movlw	high stringdir
   248  0252  008A               	movwf	10
   249  0253  0804               	movf	4,w
   250  0254  0A84               	incf	4,f
   251  0255  0782               	addwf	2,f
   252  0256                     __stringbase:	
   253  0256  3400               	retlw	0
   254  0257                     __end_of__stringtab:	
   255  0257                     STR_1:	
   256  0257  3478               	retlw	120	;'x'
   257  0258  3469               	retlw	105	;'i'
   258  0259  346E               	retlw	110	;'n'
   259  025A  3420               	retlw	32	;' '
   260  025B  3463               	retlw	99	;'c'
   261  025C  3468               	retlw	104	;'h'
   262  025D  3461               	retlw	97	;'a'
   263  025E  346F               	retlw	111	;'o'
   264  025F  3420               	retlw	32	;' '
   265  0260  3462               	retlw	98	;'b'
   266  0261  3461               	retlw	97	;'a'
   267  0262  346E               	retlw	110	;'n'
   268  0263  3420               	retlw	32	;' '
   269  0264  346E               	retlw	110	;'n'
   270  0265  3468               	retlw	104	;'h'
   271  0266  3461               	retlw	97	;'a'
   272  0267  3400               	retlw	0
   273  0268                     STR_2:	
   274  0268  3454               	retlw	84	;'T'
   275  0269  3475               	retlw	117	;'u'
   276  026A  3469               	retlw	105	;'i'
   277  026B  3420               	retlw	32	;' '
   278  026C  3474               	retlw	116	;'t'
   279  026D  3465               	retlw	101	;'e'
   280  026E  346E               	retlw	110	;'n'
   281  026F  3420               	retlw	32	;' '
   282  0270  346C               	retlw	108	;'l'
   283  0271  3461               	retlw	97	;'a'
   284  0272  3420               	retlw	32	;' '
   285  0273  344E               	retlw	78	;'N'
   286  0274  3467               	retlw	103	;'g'
   287  0275  3468               	retlw	104	;'h'
   288  0276  3469               	retlw	105	;'i'
   289  0277  3461               	retlw	97	;'a'
   290  0278  3400               	retlw	0
   291                           
   292                           ; #config settings
   293  0000                     
   294                           	psect	cinit
   295  0011                     start_initialization:	
   296  0011                     __initialization:	
   297                           
   298                           ; Clear objects allocated to COMMON
   299  0011  01F7               	clrf	__pbssCOMMON& (0+127)
   300  0012  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   301  0013  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   302                           
   303                           ; Clear objects allocated to BANK0
   304  0014  01D0               	clrf	__pbssBANK0& (0+127)
   305  0015  01D1               	clrf	(__pbssBANK0+1)& (0+127)
   306  0016  01D2               	clrf	(__pbssBANK0+2)& (0+127)
   307  0017  01D3               	clrf	(__pbssBANK0+3)& (0+127)
   308  0018  01D4               	clrf	(__pbssBANK0+4)& (0+127)
   309  0019  01D5               	clrf	(__pbssBANK0+5)& (0+127)
   310                           
   311                           ; Initialize objects allocated to BANK0
   312  001A  1383               	bcf	3,7	;select IRP bank0
   313  001B  3042               	movlw	low (__pdataBANK0+34)
   314  001C  00FD               	movwf	btemp+-1
   315  001D  3002               	movlw	high __pidataBANK0
   316  001E  00FE               	movwf	btemp
   317  001F  30E3               	movlw	low __pidataBANK0
   318  0020  00FF               	movwf	btemp+1
   319  0021  3020               	movlw	low __pdataBANK0
   320  0022  0084               	movwf	4
   321  0023  23ED               	fcall	init_ram0
   322  0024                     end_of_initialization:	
   323                           ;End of C runtime variable initialization code
   324                           
   325  0024                     __end_of__initialization:	
   326  0024  0183               	clrf	3
   327  0025  2A9D               	ljmp	_main	;jump to C main() function
   328                           
   329                           	psect	bssCOMMON
   330  0077                     __pbssCOMMON:	
   331  0077                     _current_row:	
   332  0077                     	ds	2
   333  0079                     _flag_timer1:	
   334  0079                     	ds	1
   335                           
   336                           	psect	bssBANK0
   337  0050                     __pbssBANK0:	
   338  0050                     _current_col:	
   339  0050                     	ds	2
   340  0052                     _timer1_cnt:	
   341  0052                     	ds	2
   342  0054                     _timer1_value:	
   343  0054                     	ds	2
   344                           
   345                           	psect	dataBANK0
   346  0020                     __pdataBANK0:	
   347  0020                     _LcdScreen:	
   348  0020                     	ds	32
   349  0040                     _time1_MUL:	
   350  0040                     	ds	2
   351                           
   352                           	psect	inittext
   353  03E9                     init_fetch0:	
   354                           ;	Called with low address in FSR and high address in W
   355                           
   356  03E9  087E               	movf	126,w
   357  03EA  008A               	movwf	10
   358  03EB  087F               	movf	127,w
   359  03EC  0082               	movwf	2
   360  03ED                     init_ram0:	
   361                           ;Called with:
   362                           ;	high address of idata address in btemp 
   363                           ;	low address of idata address in btemp+1 
   364                           ;	low address of data in FSR
   365                           ;	high address + 1 of data in btemp-1
   366                           
   367  03ED  23E9               	fcall	init_fetch0
   368  03EE  0080               	movwf	0
   369  03EF  0A84               	incf	4,f
   370  03F0  0804               	movf	4,w
   371  03F1  067D               	xorwf	125,w
   372  03F2  1903               	btfsc	3,2
   373  03F3  3400               	retlw	0
   374  03F4  0AFF               	incf	127,f
   375  03F5  1903               	btfsc	3,2
   376  03F6  0AFE               	incf	126,f
   377  03F7  2BED               	goto	init_ram0
   378                           
   379                           	psect	cstackCOMMON
   380  0070                     __pcstackCOMMON:	
   381  0070                     ?_stop_timer1:	
   382  0070                     ??_stop_timer1:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?_start_timer1:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ??_start_timer1:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?_timer1_isr:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ??_timer1_isr:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_init_system:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ?_DisplayLcdScreen:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_init_lcd:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_init_interrupt:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ?_ISR:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ??_ISR:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_main:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_lcd_delay:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_lcd_send_command:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_lcd_write_4bits:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?_lcd_write_cmd:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_lcd_write_data:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_lcd_print_char:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ?_lcd_print_charS:	
   437                           ; 1 bytes @ 0x0
   438                           
   439                           
   440                           ; 1 bytes @ 0x0
   441  0070                     	ds	4
   442  0074                     ?_LcdPrintCharS:	
   443  0074                     ??_init_interrupt:	
   444                           ; 1 bytes @ 0x4
   445                           
   446  0074                     ?_init_timer1:	
   447                           ; 1 bytes @ 0x4
   448                           
   449  0074                     ??_lcd_delay:	
   450                           ; 1 bytes @ 0x4
   451                           
   452  0074                     ??_lcd_send_command:	
   453                           ; 1 bytes @ 0x4
   454                           
   455  0074                     ??___awdiv:	
   456                           ; 1 bytes @ 0x4
   457                           
   458  0074                     lcd_print_charS@c:	
   459                           ; 1 bytes @ 0x4
   460                           
   461  0074                     LcdPrintCharS@y:	
   462                           ; 1 bytes @ 0x4
   463                           
   464  0074                     init_timer1@count:	
   465                           ; 1 bytes @ 0x4
   466                           
   467                           
   468                           ; 2 bytes @ 0x4
   469  0074                     	ds	1
   470  0075                     ??_LcdPrintStringS:	
   471  0075                     ??_SetTimer1_ms:	
   472                           ; 1 bytes @ 0x5
   473                           
   474  0075                     ??_lcd_write_4bits:	
   475                           ; 1 bytes @ 0x5
   476                           
   477  0075                     LcdPrintCharS@c:	
   478                           ; 1 bytes @ 0x5
   479                           
   480                           
   481                           ; 1 bytes @ 0x5
   482  0075                     	ds	1
   483  0076                     lcd_send_command@cmd:	
   484  0076                     lcd_write_4bits@dat:	
   485                           ; 1 bytes @ 0x6
   486                           
   487  0076                     LcdPrintCharS@x:	
   488                           ; 1 bytes @ 0x6
   489                           
   490                           
   491                           ; 1 bytes @ 0x6
   492  0076                     	ds	1
   493  0077                     ??_init_system:	
   494  0077                     ??_lcd_print_char:	
   495                           ; 1 bytes @ 0x7
   496                           
   497                           
   498                           	psect	cstackBANK0
   499  0042                     __pcstackBANK0:	
   500                           ; 1 bytes @ 0x7
   501                           
   502  0042                     ??_LcdPrintCharS:	
   503  0042                     ??_init_timer1:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  0042                     ?_v_timer0:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  0042                     ??_lcd_print_charS:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0042                     ?___awdiv:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0042                     lcd_delay@time:	
   516                           ; 2 bytes @ 0x0
   517                           
   518  0042                     ___awdiv@divisor:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0042                     v_timer0@time:	
   522                           ; 2 bytes @ 0x0
   523                           
   524                           
   525                           ; 4 bytes @ 0x0
   526  0042                     	ds	1
   527  0043                     lcd_delay@i:	
   528                           
   529                           ; 2 bytes @ 0x1
   530  0043                     	ds	1
   531  0044                     ___awdiv@dividend:	
   532                           
   533                           ; 2 bytes @ 0x2
   534  0044                     	ds	1
   535  0045                     lcd_delay@j:	
   536                           
   537                           ; 2 bytes @ 0x3
   538  0045                     	ds	1
   539  0046                     ?_LcdPrintStringS:	
   540  0046                     ??_v_timer0:	
   541                           ; 1 bytes @ 0x4
   542                           
   543  0046                     LcdPrintStringS@y:	
   544                           ; 1 bytes @ 0x4
   545                           
   546  0046                     ___awdiv@counter:	
   547                           ; 1 bytes @ 0x4
   548                           
   549                           
   550                           ; 1 bytes @ 0x4
   551  0046                     	ds	1
   552  0047                     ??_lcd_write_cmd:	
   553  0047                     ??_lcd_write_data:	
   554                           ; 1 bytes @ 0x5
   555                           
   556  0047                     LcdPrintStringS@string:	
   557                           ; 1 bytes @ 0x5
   558                           
   559  0047                     ___awdiv@sign:	
   560                           ; 1 bytes @ 0x5
   561                           
   562                           
   563                           ; 1 bytes @ 0x5
   564  0047                     	ds	1
   565  0048                     lcd_write_cmd@cmd:	
   566  0048                     lcd_write_data@data:	
   567                           ; 1 bytes @ 0x6
   568                           
   569  0048                     LcdPrintStringS@x:	
   570                           ; 1 bytes @ 0x6
   571                           
   572  0048                     ___awdiv@quotient:	
   573                           ; 1 bytes @ 0x6
   574                           
   575                           
   576                           ; 2 bytes @ 0x6
   577  0048                     	ds	1
   578  0049                     ?_lcd_set_cursor:	
   579  0049                     lcd_set_cursor@column:	
   580                           ; 1 bytes @ 0x7
   581                           
   582  0049                     lcd_print_char@c:	
   583                           ; 1 bytes @ 0x7
   584                           
   585                           
   586                           ; 1 bytes @ 0x7
   587  0049                     	ds	1
   588  004A                     ?_SetTimer1_ms:	
   589  004A                     ??_lcd_set_cursor:	
   590                           ; 1 bytes @ 0x8
   591                           
   592  004A                     v_timer0@i:	
   593                           ; 1 bytes @ 0x8
   594                           
   595  004A                     SetTimer1_ms@time:	
   596                           ; 2 bytes @ 0x8
   597                           
   598                           
   599                           ; 2 bytes @ 0x8
   600  004A                     	ds	1
   601  004B                     lcd_set_cursor@row:	
   602                           
   603                           ; 1 bytes @ 0x9
   604  004B                     	ds	1
   605  004C                     lcd_set_cursor@address:	
   606  004C                     v_timer0@j:	
   607                           ; 1 bytes @ 0xA
   608                           
   609                           
   610                           ; 2 bytes @ 0xA
   611  004C                     	ds	1
   612  004D                     ??_DisplayLcdScreen:	
   613                           
   614                           ; 1 bytes @ 0xB
   615  004D                     	ds	1
   616  004E                     ??_init_lcd:	
   617  004E                     DisplayLcdScreen@i:	
   618                           ; 1 bytes @ 0xC
   619                           
   620                           
   621                           ; 1 bytes @ 0xC
   622  004E                     	ds	1
   623  004F                     ??_main:	
   624                           
   625                           ; 1 bytes @ 0xD
   626  004F                     	ds	1
   627                           
   628                           	psect	maintext
   629  029D                     __pmaintext:	
   630 ;;
   631 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   632 ;;
   633 ;; *************** function _main *****************
   634 ;; Defined at:
   635 ;;		line 21 in file "main.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;		None
   638 ;; Auto vars:     Size  Location     Type
   639 ;;		None
   640 ;; Return value:  Size  Location     Type
   641 ;;                  1    wreg      void 
   642 ;; Registers used:
   643 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   644 ;; Tracked objects:
   645 ;;		On entry : B00/0
   646 ;;		On exit  : 0/0
   647 ;;		Unchanged: 0/0
   648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   649 ;;      Params:         0       0       0       0
   650 ;;      Locals:         0       0       0       0
   651 ;;      Temps:          0       1       0       0
   652 ;;      Totals:         0       1       0       0
   653 ;;Total ram usage:        1 bytes
   654 ;; Hardware stack levels required when called:    7
   655 ;; This function calls:
   656 ;;		_DisplayLcdScreen
   657 ;;		_LcdPrintCharS
   658 ;;		_LcdPrintStringS
   659 ;;		_init_system
   660 ;; This function is called by:
   661 ;;		Startup code after reset
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           
   666                           ;psect for function _main
   667  029D                     _main:	
   668                           
   669                           ;main.c: 22: init_system();
   670                           
   671                           ;incstack = 0
   672                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   673  029D  2391               	fcall	_init_system
   674                           
   675                           ;main.c: 26: LcdPrintCharS(0, 1, 'a');
   676  029E  01F4               	clrf	LcdPrintCharS@y
   677  029F  0AF4               	incf	LcdPrintCharS@y,f
   678  02A0  3061               	movlw	97
   679  02A1  1283               	bcf	3,5	;RP0=0, select bank0
   680  02A2  1303               	bcf	3,6	;RP1=0, select bank0
   681  02A3  00CF               	movwf	??_main
   682  02A4  084F               	movf	??_main,w
   683  02A5  00F5               	movwf	LcdPrintCharS@c
   684  02A6  3000               	movlw	0
   685  02A7  2228               	fcall	_LcdPrintCharS
   686                           
   687                           ;main.c: 28: LcdPrintStringS(0, 0, "xin chao ban nha");
   688  02A8  1283               	bcf	3,5	;RP0=0, select bank0
   689  02A9  1303               	bcf	3,6	;RP1=0, select bank0
   690  02AA  01C6               	clrf	LcdPrintStringS@y
   691  02AB  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   692  02AC  00CF               	movwf	??_main
   693  02AD  084F               	movf	??_main,w
   694  02AE  00C7               	movwf	LcdPrintStringS@string
   695  02AF  3000               	movlw	0
   696  02B0  2279               	fcall	_LcdPrintStringS
   697                           
   698                           ;main.c: 29: LcdPrintStringS(1, 0, "Tui ten la Nghia");
   699  02B1  1283               	bcf	3,5	;RP0=0, select bank0
   700  02B2  1303               	bcf	3,6	;RP1=0, select bank0
   701  02B3  01C6               	clrf	LcdPrintStringS@y
   702  02B4  3012               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   703  02B5  00CF               	movwf	??_main
   704  02B6  084F               	movf	??_main,w
   705  02B7  00C7               	movwf	LcdPrintStringS@string
   706  02B8  3001               	movlw	1
   707  02B9  2279               	fcall	_LcdPrintStringS
   708  02BA                     l1860:	
   709                           ;main.c: 30: while(1){
   710                           
   711                           
   712                           ;main.c: 31: if(flag_timer1){
   713  02BA  0879               	movf	_flag_timer1,w
   714  02BB  1903               	btfsc	3,2
   715  02BC  2ABA               	goto	l1860
   716                           
   717                           ;main.c: 32: flag_timer1 = 0;
   718  02BD  01F9               	clrf	_flag_timer1
   719                           
   720                           ;main.c: 33: DisplayLcdScreen();
   721  02BE  21F5               	fcall	_DisplayLcdScreen
   722  02BF  2ABA               	goto	l1860
   723  02C0                     __end_of_main:	
   724                           ;main.c: 34: }
   725                           ;main.c: 35: }
   726                           ;main.c: 37: return;
   727                           
   728                           
   729                           	psect	text1
   730  0391                     __ptext1:	
   731 ;; *************** function _init_system *****************
   732 ;; Defined at:
   733 ;;		line 41 in file "main.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;		None
   736 ;; Auto vars:     Size  Location     Type
   737 ;;		None
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      void 
   740 ;; Registers used:
   741 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   747 ;;      Params:         0       0       0       0
   748 ;;      Locals:         0       0       0       0
   749 ;;      Temps:          0       0       0       0
   750 ;;      Totals:         0       0       0       0
   751 ;;Total ram usage:        0 bytes
   752 ;; Hardware stack levels used:    1
   753 ;; Hardware stack levels required when called:    5
   754 ;; This function calls:
   755 ;;		_SetTimer1_ms
   756 ;;		_init_interrupt
   757 ;;		_init_lcd
   758 ;;		_init_timer1
   759 ;; This function is called by:
   760 ;;		_main
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           
   765                           ;psect for function _init_system
   766  0391                     _init_system:	
   767                           
   768                           ;main.c: 42: CMCON = 0x07;
   769                           
   770                           ;incstack = 0
   771                           ; Regs used in _init_system: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   772  0391  3007               	movlw	7
   773  0392  1283               	bcf	3,5	;RP0=0, select bank0
   774  0393  1303               	bcf	3,6	;RP1=0, select bank0
   775  0394  009F               	movwf	31	;volatile
   776                           
   777                           ;main.c: 43: PCONbits.OSCF = 1;
   778  0395  1683               	bsf	3,5	;RP0=1, select bank1
   779  0396  1303               	bcf	3,6	;RP1=0, select bank1
   780  0397  158E               	bsf	14,3	;volatile
   781                           
   782                           ;main.c: 45: TRISB = 0x00;
   783  0398  0186               	clrf	6	;volatile
   784                           
   785                           ;main.c: 46: init_lcd();
   786  0399  2026               	fcall	_init_lcd
   787                           
   788                           ;main.c: 48: init_interrupt();
   789  039A  240A               	fcall	_init_interrupt
   790                           
   791                           ;main.c: 49: init_timer1(10000);
   792  039B  3010               	movlw	16
   793  039C  00F4               	movwf	init_timer1@count
   794  039D  3027               	movlw	39
   795  039E  00F5               	movwf	init_timer1@count+1
   796  039F  22C0               	fcall	_init_timer1
   797                           
   798                           ;main.c: 51: SetTimer1_ms(50);
   799  03A0  3032               	movlw	50
   800  03A1  1283               	bcf	3,5	;RP0=0, select bank0
   801  03A2  1303               	bcf	3,6	;RP1=0, select bank0
   802  03A3  00CA               	movwf	SetTimer1_ms@time
   803  03A4  3000               	movlw	0
   804  03A5  00CB               	movwf	SetTimer1_ms@time+1
   805  03A6  23BF               	fcall	_SetTimer1_ms
   806  03A7  0008               	return
   807  03A8                     __end_of_init_system:	
   808                           
   809                           	psect	text2
   810  02C0                     __ptext2:	
   811 ;; *************** function _init_timer1 *****************
   812 ;; Defined at:
   813 ;;		line 8 in file "timer.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;  count           2    4[COMMON] unsigned int 
   816 ;; Auto vars:     Size  Location     Type
   817 ;;		None
   818 ;; Return value:  Size  Location     Type
   819 ;;                  1    wreg      void 
   820 ;; Registers used:
   821 ;;		wreg, status,2, status,0
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   827 ;;      Params:         2       0       0       0
   828 ;;      Locals:         0       0       0       0
   829 ;;      Temps:          0       2       0       0
   830 ;;      Totals:         2       2       0       0
   831 ;;Total ram usage:        4 bytes
   832 ;; Hardware stack levels used:    1
   833 ;; Hardware stack levels required when called:    2
   834 ;; This function calls:
   835 ;;		Nothing
   836 ;; This function is called by:
   837 ;;		_init_system
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           
   842                           ;psect for function _init_timer1
   843  02C0                     _init_timer1:	
   844                           
   845                           ;timer.c: 10: T1CONbits.TMR1ON = 0;
   846                           
   847                           ;incstack = 0
   848                           ; Regs used in _init_timer1: [wreg+status,2+status,0]
   849  02C0  1283               	bcf	3,5	;RP0=0, select bank0
   850  02C1  1303               	bcf	3,6	;RP1=0, select bank0
   851  02C2  1010               	bcf	16,0	;volatile
   852                           
   853                           ;timer.c: 11: timer1_value = 65535 - count;
   854  02C3  0974               	comf	init_timer1@count,w
   855  02C4  00C2               	movwf	??_init_timer1
   856  02C5  0975               	comf	init_timer1@count+1,w
   857  02C6  00C3               	movwf	??_init_timer1+1
   858  02C7  0AC2               	incf	??_init_timer1,f
   859  02C8  1903               	skipnz
   860  02C9  0AC3               	incf	??_init_timer1+1,f
   861  02CA  0842               	movf	??_init_timer1,w
   862  02CB  3EFF               	addlw	255
   863  02CC  00D4               	movwf	_timer1_value
   864  02CD  0843               	movf	??_init_timer1+1,w
   865  02CE  1803               	skipnc
   866  02CF  3E01               	addlw	1
   867  02D0  3EFF               	addlw	255
   868  02D1  00D5               	movwf	_timer1_value+1
   869                           
   870                           ;timer.c: 12: TMR1 = timer1_value;
   871  02D2  0855               	movf	_timer1_value+1,w
   872  02D3  008F               	movwf	15	;volatile
   873  02D4  0854               	movf	_timer1_value,w
   874  02D5  008E               	movwf	14	;volatile
   875                           
   876                           ;timer.c: 14: T1CONbits.TMR1CS = 0;
   877  02D6  1090               	bcf	16,1	;volatile
   878                           
   879                           ;timer.c: 16: T1CONbits.T1CKPS0 = 0;
   880  02D7  1210               	bcf	16,4	;volatile
   881                           
   882                           ;timer.c: 17: T1CONbits.T1CKPS1 = 0;
   883  02D8  1290               	bcf	16,5	;volatile
   884                           
   885                           ;timer.c: 19: TMR1IF = 0;
   886  02D9  100C               	bcf	12,0	;volatile
   887                           
   888                           ;timer.c: 20: TMR1IE = 1;
   889  02DA  1683               	bsf	3,5	;RP0=1, select bank1
   890  02DB  1303               	bcf	3,6	;RP1=0, select bank1
   891  02DC  140C               	bsf	12,0	;volatile
   892                           
   893                           ;timer.c: 21: GIE = 1;
   894  02DD  178B               	bsf	11,7	;volatile
   895                           
   896                           ;timer.c: 22: PEIE = 1;
   897  02DE  170B               	bsf	11,6	;volatile
   898                           
   899                           ;timer.c: 23: T1CONbits.TMR1ON = 1;
   900  02DF  1283               	bcf	3,5	;RP0=0, select bank0
   901  02E0  1303               	bcf	3,6	;RP1=0, select bank0
   902  02E1  1410               	bsf	16,0	;volatile
   903  02E2  0008               	return
   904  02E3                     __end_of_init_timer1:	
   905                           
   906                           	psect	text3
   907  0026                     __ptext3:	
   908 ;; *************** function _init_lcd *****************
   909 ;; Defined at:
   910 ;;		line 52 in file "lcd.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;		None
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   924 ;;      Params:         0       0       0       0
   925 ;;      Locals:         0       0       0       0
   926 ;;      Temps:          0       1       0       0
   927 ;;      Totals:         0       1       0       0
   928 ;;Total ram usage:        1 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; Hardware stack levels required when called:    4
   931 ;; This function calls:
   932 ;;		_lcd_send_command
   933 ;;		_v_timer0
   934 ;; This function is called by:
   935 ;;		_init_system
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939                           
   940                           ;psect for function _init_lcd
   941  0026                     _init_lcd:	
   942                           
   943                           ;lcd.c: 54: v_timer0(25);
   944                           
   945                           ;incstack = 0
   946                           ; Regs used in _init_lcd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   947  0026  3000               	movlw	0
   948  0027  1283               	bcf	3,5	;RP0=0, select bank0
   949  0028  1303               	bcf	3,6	;RP1=0, select bank0
   950  0029  00C5               	movwf	v_timer0@time+3
   951  002A  3000               	movlw	0
   952  002B  00C4               	movwf	v_timer0@time+2
   953  002C  3000               	movlw	0
   954  002D  00C3               	movwf	v_timer0@time+1
   955  002E  3019               	movlw	25
   956  002F  00C2               	movwf	v_timer0@time
   957  0030  2174               	fcall	_v_timer0
   958                           
   959                           ;lcd.c: 56: PORTB&=0x0f;
   960  0031  300F               	movlw	15
   961  0032  1283               	bcf	3,5	;RP0=0, select bank0
   962  0033  1303               	bcf	3,6	;RP1=0, select bank0
   963  0034  00CE               	movwf	??_init_lcd
   964  0035  084E               	movf	??_init_lcd,w
   965  0036  0586               	andwf	6,f	;volatile
   966                           
   967                           ;lcd.c: 57: PORTB&=0xf8;
   968  0037  30F8               	movlw	248
   969  0038  00CE               	movwf	??_init_lcd
   970  0039  084E               	movf	??_init_lcd,w
   971  003A  0586               	andwf	6,f	;volatile
   972                           
   973                           ;lcd.c: 60: PORTB &= 0x0F; PORTB |= (0x03<<4);
   974  003B  300F               	movlw	15
   975  003C  00CE               	movwf	??_init_lcd
   976  003D  084E               	movf	??_init_lcd,w
   977  003E  0586               	andwf	6,f	;volatile
   978                           
   979                           ;lcd.c: 61: ( (1) ? ( PORTB |= (1<<3) ) : ( PORTB &= ~(1<<3) ) );
   980  003F  3030               	movlw	48
   981  0040  00CE               	movwf	??_init_lcd
   982  0041  084E               	movf	??_init_lcd,w
   983  0042  0486               	iorwf	6,f	;volatile
   984  0043  1586               	bsf	6,3	;volatile
   985                           
   986                           ;lcd.c: 62: v_timer0(1);
   987  0044  3000               	movlw	0
   988  0045  00C5               	movwf	v_timer0@time+3
   989  0046  3000               	movlw	0
   990  0047  00C4               	movwf	v_timer0@time+2
   991  0048  3000               	movlw	0
   992  0049  00C3               	movwf	v_timer0@time+1
   993  004A  3001               	movlw	1
   994  004B  00C2               	movwf	v_timer0@time
   995  004C  2174               	fcall	_v_timer0
   996                           
   997                           ;lcd.c: 63: ( (0) ? ( PORTB |= (1<<3) ) : ( PORTB &= ~(1<<3) ) );
   998  004D  30F7               	movlw	247
   999  004E  1283               	bcf	3,5	;RP0=0, select bank0
  1000  004F  1303               	bcf	3,6	;RP1=0, select bank0
  1001  0050  00CE               	movwf	??_init_lcd
  1002  0051  084E               	movf	??_init_lcd,w
  1003  0052  0586               	andwf	6,f	;volatile
  1004                           
  1005                           ;lcd.c: 64: v_timer0(1);
  1006  0053  3000               	movlw	0
  1007  0054  00C5               	movwf	v_timer0@time+3
  1008  0055  3000               	movlw	0
  1009  0056  00C4               	movwf	v_timer0@time+2
  1010  0057  3000               	movlw	0
  1011  0058  00C3               	movwf	v_timer0@time+1
  1012  0059  3001               	movlw	1
  1013  005A  00C2               	movwf	v_timer0@time
  1014  005B  2174               	fcall	_v_timer0
  1015                           
  1016                           ;lcd.c: 67: PORTB &= 0x0F; PORTB |= (0x03<<4);
  1017  005C  300F               	movlw	15
  1018  005D  1283               	bcf	3,5	;RP0=0, select bank0
  1019  005E  1303               	bcf	3,6	;RP1=0, select bank0
  1020  005F  00CE               	movwf	??_init_lcd
  1021  0060  084E               	movf	??_init_lcd,w
  1022  0061  0586               	andwf	6,f	;volatile
  1023                           
  1024                           ;lcd.c: 68: ( (1) ? ( PORTB |= (1<<3) ) : ( PORTB &= ~(1<<3) ) );
  1025  0062  3030               	movlw	48
  1026  0063  00CE               	movwf	??_init_lcd
  1027  0064  084E               	movf	??_init_lcd,w
  1028  0065  0486               	iorwf	6,f	;volatile
  1029  0066  1586               	bsf	6,3	;volatile
  1030                           
  1031                           ;lcd.c: 69: v_timer0(1);
  1032  0067  3000               	movlw	0
  1033  0068  00C5               	movwf	v_timer0@time+3
  1034  0069  3000               	movlw	0
  1035  006A  00C4               	movwf	v_timer0@time+2
  1036  006B  3000               	movlw	0
  1037  006C  00C3               	movwf	v_timer0@time+1
  1038  006D  3001               	movlw	1
  1039  006E  00C2               	movwf	v_timer0@time
  1040  006F  2174               	fcall	_v_timer0
  1041                           
  1042                           ;lcd.c: 70: ( (0) ? ( PORTB |= (1<<3) ) : ( PORTB &= ~(1<<3) ) );
  1043  0070  30F7               	movlw	247
  1044  0071  1283               	bcf	3,5	;RP0=0, select bank0
  1045  0072  1303               	bcf	3,6	;RP1=0, select bank0
  1046  0073  00CE               	movwf	??_init_lcd
  1047  0074  084E               	movf	??_init_lcd,w
  1048  0075  0586               	andwf	6,f	;volatile
  1049                           
  1050                           ;lcd.c: 71: v_timer0(1);
  1051  0076  3000               	movlw	0
  1052  0077  00C5               	movwf	v_timer0@time+3
  1053  0078  3000               	movlw	0
  1054  0079  00C4               	movwf	v_timer0@time+2
  1055  007A  3000               	movlw	0
  1056  007B  00C3               	movwf	v_timer0@time+1
  1057  007C  3001               	movlw	1
  1058  007D  00C2               	movwf	v_timer0@time
  1059  007E  2174               	fcall	_v_timer0
  1060                           
  1061                           ;lcd.c: 74: PORTB &= 0x0F; PORTB |= (0x03<<4);
  1062  007F  300F               	movlw	15
  1063  0080  1283               	bcf	3,5	;RP0=0, select bank0
  1064  0081  1303               	bcf	3,6	;RP1=0, select bank0
  1065  0082  00CE               	movwf	??_init_lcd
  1066  0083  084E               	movf	??_init_lcd,w
  1067  0084  0586               	andwf	6,f	;volatile
  1068                           
  1069                           ;lcd.c: 75: ( (1) ? ( PORTB |= (1<<3) ) : ( PORTB &= ~(1<<3) ) );
  1070  0085  3030               	movlw	48
  1071  0086  00CE               	movwf	??_init_lcd
  1072  0087  084E               	movf	??_init_lcd,w
  1073  0088  0486               	iorwf	6,f	;volatile
  1074  0089  1586               	bsf	6,3	;volatile
  1075                           
  1076                           ;lcd.c: 76: v_timer0(1);
  1077  008A  3000               	movlw	0
  1078  008B  00C5               	movwf	v_timer0@time+3
  1079  008C  3000               	movlw	0
  1080  008D  00C4               	movwf	v_timer0@time+2
  1081  008E  3000               	movlw	0
  1082  008F  00C3               	movwf	v_timer0@time+1
  1083  0090  3001               	movlw	1
  1084  0091  00C2               	movwf	v_timer0@time
  1085  0092  2174               	fcall	_v_timer0
  1086                           
  1087                           ;lcd.c: 77: ( (0) ? ( PORTB |= (1<<3) ) : ( PORTB &= ~(1<<3) ) );
  1088  0093  30F7               	movlw	247
  1089  0094  1283               	bcf	3,5	;RP0=0, select bank0
  1090  0095  1303               	bcf	3,6	;RP1=0, select bank0
  1091  0096  00CE               	movwf	??_init_lcd
  1092  0097  084E               	movf	??_init_lcd,w
  1093  0098  0586               	andwf	6,f	;volatile
  1094                           
  1095                           ;lcd.c: 78: v_timer0(1);
  1096  0099  3000               	movlw	0
  1097  009A  00C5               	movwf	v_timer0@time+3
  1098  009B  3000               	movlw	0
  1099  009C  00C4               	movwf	v_timer0@time+2
  1100  009D  3000               	movlw	0
  1101  009E  00C3               	movwf	v_timer0@time+1
  1102  009F  3001               	movlw	1
  1103  00A0  00C2               	movwf	v_timer0@time
  1104  00A1  2174               	fcall	_v_timer0
  1105                           
  1106                           ;lcd.c: 81: PORTB &= 0x0F; PORTB |= (0x02<<4);
  1107  00A2  300F               	movlw	15
  1108  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  1109  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  1110  00A5  00CE               	movwf	??_init_lcd
  1111  00A6  084E               	movf	??_init_lcd,w
  1112  00A7  0586               	andwf	6,f	;volatile
  1113                           
  1114                           ;lcd.c: 82: ( (1) ? ( PORTB |= (1<<3) ) : ( PORTB &= ~(1<<3) ) );
  1115  00A8  1686               	bsf	6,5	;volatile
  1116  00A9  1586               	bsf	6,3	;volatile
  1117                           
  1118                           ;lcd.c: 83: v_timer0(1);
  1119  00AA  3000               	movlw	0
  1120  00AB  00C5               	movwf	v_timer0@time+3
  1121  00AC  3000               	movlw	0
  1122  00AD  00C4               	movwf	v_timer0@time+2
  1123  00AE  3000               	movlw	0
  1124  00AF  00C3               	movwf	v_timer0@time+1
  1125  00B0  3001               	movlw	1
  1126  00B1  00C2               	movwf	v_timer0@time
  1127  00B2  2174               	fcall	_v_timer0
  1128                           
  1129                           ;lcd.c: 84: ( (0) ? ( PORTB |= (1<<3) ) : ( PORTB &= ~(1<<3) ) );
  1130  00B3  30F7               	movlw	247
  1131  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1132  00B5  1303               	bcf	3,6	;RP1=0, select bank0
  1133  00B6  00CE               	movwf	??_init_lcd
  1134  00B7  084E               	movf	??_init_lcd,w
  1135  00B8  0586               	andwf	6,f	;volatile
  1136                           
  1137                           ;lcd.c: 85: v_timer0(1);
  1138  00B9  3000               	movlw	0
  1139  00BA  00C5               	movwf	v_timer0@time+3
  1140  00BB  3000               	movlw	0
  1141  00BC  00C4               	movwf	v_timer0@time+2
  1142  00BD  3000               	movlw	0
  1143  00BE  00C3               	movwf	v_timer0@time+1
  1144  00BF  3001               	movlw	1
  1145  00C0  00C2               	movwf	v_timer0@time
  1146  00C1  2174               	fcall	_v_timer0
  1147                           
  1148                           ;lcd.c: 87: lcd_send_command(0x28);
  1149  00C2  3028               	movlw	40
  1150  00C3  2122               	fcall	_lcd_send_command
  1151                           
  1152                           ;lcd.c: 89: lcd_send_command(0x0c);
  1153  00C4  300C               	movlw	12
  1154  00C5  2122               	fcall	_lcd_send_command
  1155  00C6  0008               	return
  1156  00C7                     __end_of_init_lcd:	
  1157                           
  1158                           	psect	text4
  1159  0122                     __ptext4:	
  1160 ;; *************** function _lcd_send_command *****************
  1161 ;; Defined at:
  1162 ;;		line 33 in file "lcd.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  cmd             1    wreg     unsigned char 
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;  cmd             1    6[COMMON] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      void 
  1169 ;; Registers used:
  1170 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1176 ;;      Params:         0       0       0       0
  1177 ;;      Locals:         1       0       0       0
  1178 ;;      Temps:          2       0       0       0
  1179 ;;      Totals:         3       0       0       0
  1180 ;;Total ram usage:        3 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    3
  1183 ;; This function calls:
  1184 ;;		_v_timer0
  1185 ;; This function is called by:
  1186 ;;		_init_lcd
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190                           
  1191                           ;psect for function _lcd_send_command
  1192  0122                     _lcd_send_command:	
  1193                           
  1194                           ;incstack = 0
  1195                           ; Regs used in _lcd_send_command: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1196                           ;lcd_send_command@cmd stored from wreg
  1197  0122  00F6               	movwf	lcd_send_command@cmd
  1198                           
  1199                           ;lcd.c: 35: PORTB &= 0x0f;
  1200  0123  300F               	movlw	15
  1201  0124  00F4               	movwf	??_lcd_send_command
  1202  0125  0874               	movf	??_lcd_send_command,w
  1203  0126  1283               	bcf	3,5	;RP0=0, select bank0
  1204  0127  1303               	bcf	3,6	;RP1=0, select bank0
  1205  0128  0586               	andwf	6,f	;volatile
  1206                           
  1207                           ;lcd.c: 36: PORTB |= (cmd&0xf0);
  1208  0129  0876               	movf	lcd_send_command@cmd,w
  1209  012A  39F0               	andlw	240
  1210  012B  00F4               	movwf	??_lcd_send_command
  1211  012C  0874               	movf	??_lcd_send_command,w
  1212  012D  0486               	iorwf	6,f	;volatile
  1213                           
  1214                           ;lcd.c: 37: PORTB |= (1 << 3);
  1215  012E  1586               	bsf	6,3	;volatile
  1216                           
  1217                           ;lcd.c: 38: v_timer0(1);
  1218  012F  3000               	movlw	0
  1219  0130  00C5               	movwf	v_timer0@time+3
  1220  0131  3000               	movlw	0
  1221  0132  00C4               	movwf	v_timer0@time+2
  1222  0133  3000               	movlw	0
  1223  0134  00C3               	movwf	v_timer0@time+1
  1224  0135  3001               	movlw	1
  1225  0136  00C2               	movwf	v_timer0@time
  1226  0137  2174               	fcall	_v_timer0
  1227                           
  1228                           ;lcd.c: 40: PORTB &=~ (1 <<3);
  1229  0138  30F7               	movlw	247
  1230  0139  00F4               	movwf	??_lcd_send_command
  1231  013A  0874               	movf	??_lcd_send_command,w
  1232  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1233  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1234  013D  0586               	andwf	6,f	;volatile
  1235                           
  1236                           ;lcd.c: 41: v_timer0(1);
  1237  013E  3000               	movlw	0
  1238  013F  00C5               	movwf	v_timer0@time+3
  1239  0140  3000               	movlw	0
  1240  0141  00C4               	movwf	v_timer0@time+2
  1241  0142  3000               	movlw	0
  1242  0143  00C3               	movwf	v_timer0@time+1
  1243  0144  3001               	movlw	1
  1244  0145  00C2               	movwf	v_timer0@time
  1245  0146  2174               	fcall	_v_timer0
  1246                           
  1247                           ;lcd.c: 43: PORTB &= 0x0f;
  1248  0147  300F               	movlw	15
  1249  0148  00F4               	movwf	??_lcd_send_command
  1250  0149  0874               	movf	??_lcd_send_command,w
  1251  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1252  014B  1303               	bcf	3,6	;RP1=0, select bank0
  1253  014C  0586               	andwf	6,f	;volatile
  1254                           
  1255                           ;lcd.c: 44: PORTB |= (cmd<<4);
  1256  014D  0876               	movf	lcd_send_command@cmd,w
  1257  014E  00F4               	movwf	??_lcd_send_command
  1258  014F  3003               	movlw	3
  1259  0150                     u995:	
  1260  0150  1003               	clrc
  1261  0151  0DF4               	rlf	??_lcd_send_command,f
  1262  0152  3EFF               	addlw	-1
  1263  0153  1D03               	skipz
  1264  0154  2950               	goto	u995
  1265  0155  1003               	clrc
  1266  0156  0D74               	rlf	??_lcd_send_command,w
  1267  0157  00F5               	movwf	??_lcd_send_command+1
  1268  0158  0875               	movf	??_lcd_send_command+1,w
  1269  0159  0486               	iorwf	6,f	;volatile
  1270                           
  1271                           ;lcd.c: 45: PORTB |= (1 <<3);
  1272  015A  1586               	bsf	6,3	;volatile
  1273                           
  1274                           ;lcd.c: 46: v_timer0(1);
  1275  015B  3000               	movlw	0
  1276  015C  00C5               	movwf	v_timer0@time+3
  1277  015D  3000               	movlw	0
  1278  015E  00C4               	movwf	v_timer0@time+2
  1279  015F  3000               	movlw	0
  1280  0160  00C3               	movwf	v_timer0@time+1
  1281  0161  3001               	movlw	1
  1282  0162  00C2               	movwf	v_timer0@time
  1283  0163  2174               	fcall	_v_timer0
  1284                           
  1285                           ;lcd.c: 48: PORTB &=~ (1 <<3);
  1286  0164  30F7               	movlw	247
  1287  0165  00F4               	movwf	??_lcd_send_command
  1288  0166  0874               	movf	??_lcd_send_command,w
  1289  0167  1283               	bcf	3,5	;RP0=0, select bank0
  1290  0168  1303               	bcf	3,6	;RP1=0, select bank0
  1291  0169  0586               	andwf	6,f	;volatile
  1292                           
  1293                           ;lcd.c: 49: v_timer0(1);
  1294  016A  3000               	movlw	0
  1295  016B  00C5               	movwf	v_timer0@time+3
  1296  016C  3000               	movlw	0
  1297  016D  00C4               	movwf	v_timer0@time+2
  1298  016E  3000               	movlw	0
  1299  016F  00C3               	movwf	v_timer0@time+1
  1300  0170  3001               	movlw	1
  1301  0171  00C2               	movwf	v_timer0@time
  1302  0172  2174               	fcall	_v_timer0
  1303  0173  0008               	return
  1304  0174                     __end_of_lcd_send_command:	
  1305                           
  1306                           	psect	text5
  1307  0174                     __ptext5:	
  1308 ;; *************** function _v_timer0 *****************
  1309 ;; Defined at:
  1310 ;;		line 17 in file "lcd.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;  time            4    0[BANK0 ] unsigned long 
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  j               2   10[BANK0 ] int 
  1315 ;;  i               2    8[BANK0 ] int 
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  1    wreg      void 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, btemp+1
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1325 ;;      Params:         0       4       0       0
  1326 ;;      Locals:         0       4       0       0
  1327 ;;      Temps:          0       4       0       0
  1328 ;;      Totals:         0      12       0       0
  1329 ;;Total ram usage:       12 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    2
  1332 ;; This function calls:
  1333 ;;		Nothing
  1334 ;; This function is called by:
  1335 ;;		_lcd_send_command
  1336 ;;		_init_lcd
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339                           
  1340                           
  1341                           ;psect for function _v_timer0
  1342  0174                     _v_timer0:	
  1343                           
  1344                           ;lcd.c: 19: int i,j;
  1345                           ;lcd.c: 20: for(i=0;i<time;i++)
  1346                           
  1347                           ;incstack = 0
  1348                           ; Regs used in _v_timer0: [wreg+status,2+btemp+1]
  1349  0174  1283               	bcf	3,5	;RP0=0, select bank0
  1350  0175  1303               	bcf	3,6	;RP1=0, select bank0
  1351  0176  01CA               	clrf	v_timer0@i
  1352  0177  01CB               	clrf	v_timer0@i+1
  1353  0178                     l67:	
  1354  0178  084A               	movf	v_timer0@i,w
  1355  0179  00C6               	movwf	??_v_timer0
  1356  017A  084B               	movf	v_timer0@i+1,w
  1357  017B  00C7               	movwf	??_v_timer0+1
  1358  017C  3000               	movlw	0
  1359  017D  1BC7               	btfsc	??_v_timer0+1,7
  1360  017E  30FF               	movlw	255
  1361  017F  00C8               	movwf	??_v_timer0+2
  1362  0180  00C9               	movwf	??_v_timer0+3
  1363  0181  0845               	movf	v_timer0@time+3,w
  1364  0182  0249               	subwf	??_v_timer0+3,w
  1365  0183  1D03               	skipz
  1366  0184  298F               	goto	u985
  1367  0185  0844               	movf	v_timer0@time+2,w
  1368  0186  0248               	subwf	??_v_timer0+2,w
  1369  0187  1D03               	skipz
  1370  0188  298F               	goto	u985
  1371  0189  0843               	movf	v_timer0@time+1,w
  1372  018A  0247               	subwf	??_v_timer0+1,w
  1373  018B  1D03               	skipz
  1374  018C  298F               	goto	u985
  1375  018D  0842               	movf	v_timer0@time,w
  1376  018E  0246               	subwf	??_v_timer0,w
  1377  018F                     u985:	
  1378  018F  1803               	btfsc	3,0
  1379  0190  0008               	return
  1380                           
  1381                           ;lcd.c: 21: for(j=0;j<160;j++);
  1382  0191  01CC               	clrf	v_timer0@j
  1383  0192  01CD               	clrf	v_timer0@j+1
  1384  0193  084D               	movf	v_timer0@j+1,w
  1385  0194  3A80               	xorlw	128
  1386  0195  00FF               	movwf	127
  1387  0196  3080               	movlw	128
  1388  0197  027F               	subwf	127,w
  1389  0198  1D03               	skipz
  1390  0199  299C               	goto	u965
  1391  019A  30A0               	movlw	160
  1392  019B  024C               	subwf	v_timer0@j,w
  1393  019C                     u965:	
  1394  019C  1803               	btfsc	3,0
  1395  019D  29B1               	goto	l1572
  1396  019E                     l1568:	
  1397  019E  3001               	movlw	1
  1398  019F  1283               	bcf	3,5	;RP0=0, select bank0
  1399  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1400  01A1  07CC               	addwf	v_timer0@j,f
  1401  01A2  1803               	skipnc
  1402  01A3  0ACD               	incf	v_timer0@j+1,f
  1403  01A4  3000               	movlw	0
  1404  01A5  07CD               	addwf	v_timer0@j+1,f
  1405  01A6  084D               	movf	v_timer0@j+1,w
  1406  01A7  3A80               	xorlw	128
  1407  01A8  00FF               	movwf	127
  1408  01A9  3080               	movlw	128
  1409  01AA  027F               	subwf	127,w
  1410  01AB  1D03               	skipz
  1411  01AC  29AF               	goto	u975
  1412  01AD  30A0               	movlw	160
  1413  01AE  024C               	subwf	v_timer0@j,w
  1414  01AF                     u975:	
  1415  01AF  1C03               	skipc
  1416  01B0  299E               	goto	l1568
  1417  01B1                     l1572:	
  1418  01B1  3001               	movlw	1
  1419  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1420  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1421  01B4  07CA               	addwf	v_timer0@i,f
  1422  01B5  1803               	skipnc
  1423  01B6  0ACB               	incf	v_timer0@i+1,f
  1424  01B7  3000               	movlw	0
  1425  01B8  07CB               	addwf	v_timer0@i+1,f
  1426  01B9  2978               	goto	l67
  1427  01BA                     __end_of_v_timer0:	
  1428                           
  1429                           	psect	text6
  1430  040A                     __ptext6:	
  1431 ;; *************** function _init_interrupt *****************
  1432 ;; Defined at:
  1433 ;;		line 4 in file "interrupt.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;		None
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		None
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1447 ;;      Params:         0       0       0       0
  1448 ;;      Locals:         0       0       0       0
  1449 ;;      Temps:          0       0       0       0
  1450 ;;      Totals:         0       0       0       0
  1451 ;;Total ram usage:        0 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; Hardware stack levels required when called:    2
  1454 ;; This function calls:
  1455 ;;		Nothing
  1456 ;; This function is called by:
  1457 ;;		_init_system
  1458 ;; This function uses a non-reentrant model
  1459 ;;
  1460                           
  1461                           
  1462                           ;psect for function _init_interrupt
  1463  040A                     _init_interrupt:	
  1464                           
  1465                           ;interrupt.c: 5: INTCONbits.GIE = 1;
  1466                           
  1467                           ;incstack = 0
  1468                           ; Regs used in _init_interrupt: []
  1469  040A  178B               	bsf	11,7	;volatile
  1470                           
  1471                           ;interrupt.c: 6: INTCONbits.PEIE = 1;
  1472  040B  170B               	bsf	11,6	;volatile
  1473  040C  0008               	return
  1474  040D                     __end_of_init_interrupt:	
  1475                           
  1476                           	psect	text7
  1477  03BF                     __ptext7:	
  1478 ;; *************** function _SetTimer1_ms *****************
  1479 ;; Defined at:
  1480 ;;		line 47 in file "timer.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;  time            2    8[BANK0 ] int 
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;		None
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  1    wreg      void 
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0, pclath, cstack
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1494 ;;      Params:         0       2       0       0
  1495 ;;      Locals:         0       0       0       0
  1496 ;;      Temps:          0       0       0       0
  1497 ;;      Totals:         0       2       0       0
  1498 ;;Total ram usage:        2 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; Hardware stack levels required when called:    3
  1501 ;; This function calls:
  1502 ;;		___awdiv
  1503 ;; This function is called by:
  1504 ;;		_init_system
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           
  1509                           ;psect for function _SetTimer1_ms
  1510  03BF                     _SetTimer1_ms:	
  1511                           
  1512                           ;timer.c: 49: time1_MUL = time/10;
  1513                           
  1514                           ;incstack = 0
  1515                           ; Regs used in _SetTimer1_ms: [wreg+status,2+status,0+pclath+cstack]
  1516  03BF  300A               	movlw	10
  1517  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  1518  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  1519  03C2  00C2               	movwf	___awdiv@divisor
  1520  03C3  3000               	movlw	0
  1521  03C4  00C3               	movwf	___awdiv@divisor+1
  1522  03C5  084B               	movf	SetTimer1_ms@time+1,w
  1523  03C6  00C5               	movwf	___awdiv@dividend+1
  1524  03C7  084A               	movf	SetTimer1_ms@time,w
  1525  03C8  00C4               	movwf	___awdiv@dividend
  1526  03C9  20C7               	fcall	___awdiv
  1527  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  1528  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  1529  03CC  0843               	movf	?___awdiv+1,w
  1530  03CD  00C1               	movwf	_time1_MUL+1
  1531  03CE  0842               	movf	?___awdiv,w
  1532  03CF  00C0               	movwf	_time1_MUL
  1533                           
  1534                           ;timer.c: 50: timer1_cnt = 0;
  1535  03D0  01D2               	clrf	_timer1_cnt
  1536  03D1  01D3               	clrf	_timer1_cnt+1
  1537                           
  1538                           ;timer.c: 51: flag_timer1 = 0;
  1539  03D2  01F9               	clrf	_flag_timer1
  1540  03D3  0008               	return
  1541  03D4                     __end_of_SetTimer1_ms:	
  1542                           
  1543                           	psect	text8
  1544  00C7                     __ptext8:	
  1545 ;; *************** function ___awdiv *****************
  1546 ;; Defined at:
  1547 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awdiv.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  divisor         2    0[BANK0 ] int 
  1550 ;;  dividend        2    2[BANK0 ] int 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  quotient        2    6[BANK0 ] int 
  1553 ;;  sign            1    5[BANK0 ] unsigned char 
  1554 ;;  counter         1    4[BANK0 ] unsigned char 
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  2    0[BANK0 ] int 
  1557 ;; Registers used:
  1558 ;;		wreg, status,2, status,0
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1564 ;;      Params:         0       4       0       0
  1565 ;;      Locals:         0       4       0       0
  1566 ;;      Temps:          1       0       0       0
  1567 ;;      Totals:         1       8       0       0
  1568 ;;Total ram usage:        9 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; Hardware stack levels required when called:    2
  1571 ;; This function calls:
  1572 ;;		Nothing
  1573 ;; This function is called by:
  1574 ;;		_SetTimer1_ms
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           
  1579                           ;psect for function ___awdiv
  1580  00C7                     ___awdiv:	
  1581                           
  1582                           ;incstack = 0
  1583                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1584  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1585  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1586  00C9  01C7               	clrf	___awdiv@sign
  1587  00CA  1FC3               	btfss	___awdiv@divisor+1,7
  1588  00CB  28D3               	goto	l1640
  1589  00CC  09C2               	comf	___awdiv@divisor,f
  1590  00CD  09C3               	comf	___awdiv@divisor+1,f
  1591  00CE  0AC2               	incf	___awdiv@divisor,f
  1592  00CF  1903               	skipnz
  1593  00D0  0AC3               	incf	___awdiv@divisor+1,f
  1594  00D1  01C7               	clrf	___awdiv@sign
  1595  00D2  0AC7               	incf	___awdiv@sign,f
  1596  00D3                     l1640:	
  1597  00D3  1FC5               	btfss	___awdiv@dividend+1,7
  1598  00D4  28DE               	goto	l1646
  1599  00D5  09C4               	comf	___awdiv@dividend,f
  1600  00D6  09C5               	comf	___awdiv@dividend+1,f
  1601  00D7  0AC4               	incf	___awdiv@dividend,f
  1602  00D8  1903               	skipnz
  1603  00D9  0AC5               	incf	___awdiv@dividend+1,f
  1604  00DA  3001               	movlw	1
  1605  00DB  00F4               	movwf	??___awdiv
  1606  00DC  0874               	movf	??___awdiv,w
  1607  00DD  06C7               	xorwf	___awdiv@sign,f
  1608  00DE                     l1646:	
  1609  00DE  01C8               	clrf	___awdiv@quotient
  1610  00DF  01C9               	clrf	___awdiv@quotient+1
  1611  00E0  0842               	movf	___awdiv@divisor,w
  1612  00E1  0443               	iorwf	___awdiv@divisor+1,w
  1613  00E2  1903               	btfsc	3,2
  1614  00E3  2915               	goto	l1668
  1615  00E4  01C6               	clrf	___awdiv@counter
  1616  00E5  0AC6               	incf	___awdiv@counter,f
  1617  00E6                     l1656:	
  1618  00E6  1BC3               	btfsc	___awdiv@divisor+1,7
  1619  00E7  28F4               	goto	l1658
  1620  00E8  3001               	movlw	1
  1621  00E9                     u1055:	
  1622  00E9  1003               	clrc
  1623  00EA  0DC2               	rlf	___awdiv@divisor,f
  1624  00EB  0DC3               	rlf	___awdiv@divisor+1,f
  1625  00EC  3EFF               	addlw	-1
  1626  00ED  1D03               	skipz
  1627  00EE  28E9               	goto	u1055
  1628  00EF  3001               	movlw	1
  1629  00F0  00F4               	movwf	??___awdiv
  1630  00F1  0874               	movf	??___awdiv,w
  1631  00F2  07C6               	addwf	___awdiv@counter,f
  1632  00F3  28E6               	goto	l1656
  1633  00F4                     l1658:	
  1634  00F4  3001               	movlw	1
  1635  00F5                     u1075:	
  1636  00F5  1003               	clrc
  1637  00F6  0DC8               	rlf	___awdiv@quotient,f
  1638  00F7  0DC9               	rlf	___awdiv@quotient+1,f
  1639  00F8  3EFF               	addlw	-1
  1640  00F9  1D03               	skipz
  1641  00FA  28F5               	goto	u1075
  1642  00FB  0843               	movf	___awdiv@divisor+1,w
  1643  00FC  0245               	subwf	___awdiv@dividend+1,w
  1644  00FD  1D03               	skipz
  1645  00FE  2901               	goto	u1085
  1646  00FF  0842               	movf	___awdiv@divisor,w
  1647  0100  0244               	subwf	___awdiv@dividend,w
  1648  0101                     u1085:	
  1649  0101  1C03               	skipc
  1650  0102  290A               	goto	l1664
  1651  0103  0842               	movf	___awdiv@divisor,w
  1652  0104  02C4               	subwf	___awdiv@dividend,f
  1653  0105  0843               	movf	___awdiv@divisor+1,w
  1654  0106  1C03               	skipc
  1655  0107  03C5               	decf	___awdiv@dividend+1,f
  1656  0108  02C5               	subwf	___awdiv@dividend+1,f
  1657  0109  1448               	bsf	___awdiv@quotient,0
  1658  010A                     l1664:	
  1659  010A  3001               	movlw	1
  1660  010B                     u1095:	
  1661  010B  1003               	clrc
  1662  010C  0CC3               	rrf	___awdiv@divisor+1,f
  1663  010D  0CC2               	rrf	___awdiv@divisor,f
  1664  010E  3EFF               	addlw	-1
  1665  010F  1D03               	skipz
  1666  0110  290B               	goto	u1095
  1667  0111  3001               	movlw	1
  1668  0112  02C6               	subwf	___awdiv@counter,f
  1669  0113  1D03               	btfss	3,2
  1670  0114  28F4               	goto	l1658
  1671  0115                     l1668:	
  1672  0115  0847               	movf	___awdiv@sign,w
  1673  0116  1903               	btfsc	3,2
  1674  0117  291D               	goto	l1672
  1675  0118  09C8               	comf	___awdiv@quotient,f
  1676  0119  09C9               	comf	___awdiv@quotient+1,f
  1677  011A  0AC8               	incf	___awdiv@quotient,f
  1678  011B  1903               	skipnz
  1679  011C  0AC9               	incf	___awdiv@quotient+1,f
  1680  011D                     l1672:	
  1681  011D  0849               	movf	___awdiv@quotient+1,w
  1682  011E  00C3               	movwf	?___awdiv+1
  1683  011F  0848               	movf	___awdiv@quotient,w
  1684  0120  00C2               	movwf	?___awdiv
  1685  0121  0008               	return
  1686  0122                     __end_of___awdiv:	
  1687                           
  1688                           	psect	text9
  1689  0279                     __ptext9:	
  1690 ;; *************** function _LcdPrintStringS *****************
  1691 ;; Defined at:
  1692 ;;		line 200 in file "lcd.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;  x               1    wreg     unsigned char 
  1695 ;;  y               1    4[BANK0 ] unsigned char 
  1696 ;;  string          1    5[BANK0 ] PTR const unsigned char 
  1697 ;;		 -> STR_2(17), STR_1(17), 
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  x               1    6[BANK0 ] unsigned char 
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      void 
  1702 ;; Registers used:
  1703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1709 ;;      Params:         0       2       0       0
  1710 ;;      Locals:         0       1       0       0
  1711 ;;      Temps:          2       0       0       0
  1712 ;;      Totals:         2       3       0       0
  1713 ;;Total ram usage:        5 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; Hardware stack levels required when called:    3
  1716 ;; This function calls:
  1717 ;;		_lcd_print_charS
  1718 ;; This function is called by:
  1719 ;;		_main
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           
  1724                           ;psect for function _LcdPrintStringS
  1725  0279                     _LcdPrintStringS:	
  1726                           
  1727                           ;incstack = 0
  1728                           ; Regs used in _LcdPrintStringS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1729                           ;LcdPrintStringS@x stored from wreg
  1730  0279  1283               	bcf	3,5	;RP0=0, select bank0
  1731  027A  1303               	bcf	3,6	;RP1=0, select bank0
  1732  027B  00C8               	movwf	LcdPrintStringS@x
  1733                           
  1734                           ;lcd.c: 202: current_row = x%2;
  1735  027C  0848               	movf	LcdPrintStringS@x,w
  1736  027D  3901               	andlw	1
  1737  027E  00F5               	movwf	??_LcdPrintStringS
  1738  027F  01F6               	clrf	??_LcdPrintStringS+1
  1739  0280  0875               	movf	??_LcdPrintStringS,w
  1740  0281  00F7               	movwf	_current_row
  1741  0282  0876               	movf	??_LcdPrintStringS+1,w
  1742  0283  00F8               	movwf	_current_row+1
  1743                           
  1744                           ;lcd.c: 203: current_col = y%16;
  1745  0284  0846               	movf	LcdPrintStringS@y,w
  1746  0285  390F               	andlw	15
  1747  0286  00F5               	movwf	??_LcdPrintStringS
  1748  0287  01F6               	clrf	??_LcdPrintStringS+1
  1749  0288  0875               	movf	??_LcdPrintStringS,w
  1750  0289  00D0               	movwf	_current_col
  1751  028A  0876               	movf	??_LcdPrintStringS+1,w
  1752  028B  00D1               	movwf	_current_col+1
  1753  028C                     l1822:	
  1754                           ;lcd.c: 204: while (*string) {
  1755                           
  1756  028C  0847               	movf	LcdPrintStringS@string,w
  1757  028D  0084               	movwf	4
  1758  028E  2251               	fcall	stringdir
  1759  028F  3A00               	xorlw	0
  1760  0290  1903               	btfsc	3,2
  1761  0291  0008               	return
  1762                           
  1763                           ;lcd.c: 205: lcd_print_charS (*string++);
  1764  0292  0847               	movf	LcdPrintStringS@string,w
  1765  0293  0084               	movwf	4
  1766  0294  2251               	fcall	stringdir
  1767  0295  2305               	fcall	_lcd_print_charS
  1768  0296  3001               	movlw	1
  1769  0297  00F5               	movwf	??_LcdPrintStringS
  1770  0298  0875               	movf	??_LcdPrintStringS,w
  1771  0299  1283               	bcf	3,5	;RP0=0, select bank0
  1772  029A  1303               	bcf	3,6	;RP1=0, select bank0
  1773  029B  07C7               	addwf	LcdPrintStringS@string,f
  1774  029C  2A8C               	goto	l1822
  1775  029D                     __end_of_LcdPrintStringS:	
  1776                           
  1777                           	psect	text10
  1778  0305                     __ptext10:	
  1779 ;; *************** function _lcd_print_charS *****************
  1780 ;; Defined at:
  1781 ;;		line 153 in file "lcd.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;  c               1    wreg     unsigned char 
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  c               1    4[COMMON] unsigned char 
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  1    wreg      void 
  1788 ;; Registers used:
  1789 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1795 ;;      Params:         0       0       0       0
  1796 ;;      Locals:         1       0       0       0
  1797 ;;      Temps:          0       4       0       0
  1798 ;;      Totals:         1       4       0       0
  1799 ;;Total ram usage:        5 bytes
  1800 ;; Hardware stack levels used:    1
  1801 ;; Hardware stack levels required when called:    2
  1802 ;; This function calls:
  1803 ;;		Nothing
  1804 ;; This function is called by:
  1805 ;;		_LcdPrintStringS
  1806 ;;		_LcdPrintNumS
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           
  1811                           ;psect for function _lcd_print_charS
  1812  0305                     _lcd_print_charS:	
  1813                           
  1814                           ;incstack = 0
  1815                           ; Regs used in _lcd_print_charS: [wreg-fsr0h+status,2+status,0]
  1816                           ;lcd_print_charS@c stored from wreg
  1817  0305  00F4               	movwf	lcd_print_charS@c
  1818                           
  1819                           ;lcd.c: 155: LcdScreen[current_row][ current_col] = c;
  1820  0306  0874               	movf	lcd_print_charS@c,w
  1821  0307  1283               	bcf	3,5	;RP0=0, select bank0
  1822  0308  1303               	bcf	3,6	;RP1=0, select bank0
  1823  0309  00C2               	movwf	??_lcd_print_charS
  1824  030A  0877               	movf	_current_row,w
  1825  030B  00C3               	movwf	??_lcd_print_charS+1
  1826  030C  3004               	movlw	4
  1827  030D                     u1125:	
  1828  030D  1003               	clrc
  1829  030E  0DC3               	rlf	??_lcd_print_charS+1,f
  1830  030F  3EFF               	addlw	-1
  1831  0310  1D03               	skipz
  1832  0311  2B0D               	goto	u1125
  1833  0312  3020               	movlw	(low (_LcdScreen| 0))& (0+255)
  1834  0313  0743               	addwf	??_lcd_print_charS+1,w
  1835  0314  00C4               	movwf	??_lcd_print_charS+2
  1836  0315  0850               	movf	_current_col,w
  1837  0316  0744               	addwf	??_lcd_print_charS+2,w
  1838  0317  00C5               	movwf	??_lcd_print_charS+3
  1839  0318  0845               	movf	??_lcd_print_charS+3,w
  1840  0319  0084               	movwf	4
  1841  031A  0842               	movf	??_lcd_print_charS,w
  1842  031B  1383               	bcf	3,7	;select IRP bank0
  1843  031C  0080               	movwf	0
  1844                           
  1845                           ;lcd.c: 156: current_col ++;
  1846  031D  3001               	movlw	1
  1847  031E  07D0               	addwf	_current_col,f
  1848  031F  1803               	skipnc
  1849  0320  0AD1               	incf	_current_col+1,f
  1850  0321  3000               	movlw	0
  1851  0322  07D1               	addwf	_current_col+1,f
  1852  0323  0008               	return
  1853  0324                     __end_of_lcd_print_charS:	
  1854                           
  1855                           	psect	text11
  1856  0228                     __ptext11:	
  1857 ;; *************** function _LcdPrintCharS *****************
  1858 ;; Defined at:
  1859 ;;		line 159 in file "lcd.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;  x               1    wreg     unsigned char 
  1862 ;;  y               1    4[COMMON] unsigned char 
  1863 ;;  c               1    5[COMMON] unsigned char 
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;  x               1    6[COMMON] unsigned char 
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  1    wreg      void 
  1868 ;; Registers used:
  1869 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1875 ;;      Params:         2       0       0       0
  1876 ;;      Locals:         1       0       0       0
  1877 ;;      Temps:          0       4       0       0
  1878 ;;      Totals:         3       4       0       0
  1879 ;;Total ram usage:        7 bytes
  1880 ;; Hardware stack levels used:    1
  1881 ;; Hardware stack levels required when called:    2
  1882 ;; This function calls:
  1883 ;;		Nothing
  1884 ;; This function is called by:
  1885 ;;		_main
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           
  1890                           ;psect for function _LcdPrintCharS
  1891  0228                     _LcdPrintCharS:	
  1892                           
  1893                           ;incstack = 0
  1894                           ; Regs used in _LcdPrintCharS: [wreg-fsr0h+status,2+status,0]
  1895                           ;LcdPrintCharS@x stored from wreg
  1896  0228  00F6               	movwf	LcdPrintCharS@x
  1897                           
  1898                           ;lcd.c: 161: current_row = x%2;
  1899  0229  0876               	movf	LcdPrintCharS@x,w
  1900  022A  3901               	andlw	1
  1901  022B  1283               	bcf	3,5	;RP0=0, select bank0
  1902  022C  1303               	bcf	3,6	;RP1=0, select bank0
  1903  022D  00C2               	movwf	??_LcdPrintCharS
  1904  022E  01C3               	clrf	??_LcdPrintCharS+1
  1905  022F  0842               	movf	??_LcdPrintCharS,w
  1906  0230  00F7               	movwf	_current_row
  1907  0231  0843               	movf	??_LcdPrintCharS+1,w
  1908  0232  00F8               	movwf	_current_row+1
  1909                           
  1910                           ;lcd.c: 162: current_col = y%16;
  1911  0233  0874               	movf	LcdPrintCharS@y,w
  1912  0234  390F               	andlw	15
  1913  0235  00C2               	movwf	??_LcdPrintCharS
  1914  0236  01C3               	clrf	??_LcdPrintCharS+1
  1915  0237  0842               	movf	??_LcdPrintCharS,w
  1916  0238  00D0               	movwf	_current_col
  1917  0239  0843               	movf	??_LcdPrintCharS+1,w
  1918  023A  00D1               	movwf	_current_col+1
  1919                           
  1920                           ;lcd.c: 163: LcdScreen[current_row][ current_col] = c;
  1921  023B  0875               	movf	LcdPrintCharS@c,w
  1922  023C  00C2               	movwf	??_LcdPrintCharS
  1923  023D  0877               	movf	_current_row,w
  1924  023E  00C3               	movwf	??_LcdPrintCharS+1
  1925  023F  3004               	movlw	4
  1926  0240                     u1135:	
  1927  0240  1003               	clrc
  1928  0241  0DC3               	rlf	??_LcdPrintCharS+1,f
  1929  0242  3EFF               	addlw	-1
  1930  0243  1D03               	skipz
  1931  0244  2A40               	goto	u1135
  1932  0245  3020               	movlw	(low (_LcdScreen| 0))& (0+255)
  1933  0246  0743               	addwf	??_LcdPrintCharS+1,w
  1934  0247  00C4               	movwf	??_LcdPrintCharS+2
  1935  0248  0850               	movf	_current_col,w
  1936  0249  0744               	addwf	??_LcdPrintCharS+2,w
  1937  024A  00C5               	movwf	??_LcdPrintCharS+3
  1938  024B  0845               	movf	??_LcdPrintCharS+3,w
  1939  024C  0084               	movwf	4
  1940  024D  0842               	movf	??_LcdPrintCharS,w
  1941  024E  1383               	bcf	3,7	;select IRP bank0
  1942  024F  0080               	movwf	0
  1943  0250  0008               	return
  1944  0251                     __end_of_LcdPrintCharS:	
  1945                           
  1946                           	psect	text12
  1947  01F5                     __ptext12:	
  1948 ;; *************** function _DisplayLcdScreen *****************
  1949 ;; Defined at:
  1950 ;;		line 142 in file "lcd.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;		None
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;  i               1   12[BANK0 ] unsigned char 
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  1    wreg      void 
  1957 ;; Registers used:
  1958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1964 ;;      Params:         0       0       0       0
  1965 ;;      Locals:         0       1       0       0
  1966 ;;      Temps:          0       1       0       0
  1967 ;;      Totals:         0       2       0       0
  1968 ;;Total ram usage:        2 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    6
  1971 ;; This function calls:
  1972 ;;		_lcd_print_char
  1973 ;;		_lcd_set_cursor
  1974 ;; This function is called by:
  1975 ;;		_main
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           
  1980                           ;psect for function _DisplayLcdScreen
  1981  01F5                     _DisplayLcdScreen:	
  1982                           
  1983                           ;lcd.c: 144: unsigned char i;
  1984                           ;lcd.c: 145: lcd_set_cursor (0,0);
  1985                           
  1986                           ;incstack = 0
  1987                           ; Regs used in _DisplayLcdScreen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1988  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  1989  01F6  1303               	bcf	3,6	;RP1=0, select bank0
  1990  01F7  01C9               	clrf	lcd_set_cursor@column
  1991  01F8  3000               	movlw	0
  1992  01F9  2342               	fcall	_lcd_set_cursor
  1993                           
  1994                           ;lcd.c: 146: for (i = 0; i<16; i++)
  1995  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1996  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  1997  01FC  01CE               	clrf	DisplayLcdScreen@i
  1998  01FD  3010               	movlw	16
  1999  01FE  024E               	subwf	DisplayLcdScreen@i,w
  2000  01FF  1803               	btfsc	3,0
  2001  0200  2A11               	goto	l1838
  2002  0201                     l1832:	
  2003                           
  2004                           ;lcd.c: 147: lcd_print_char(LcdScreen[0][i]);
  2005  0201  084E               	movf	DisplayLcdScreen@i,w
  2006  0202  3E20               	addlw	(low (_LcdScreen| 0))& (0+255)
  2007  0203  0084               	movwf	4
  2008  0204  1383               	bcf	3,7	;select IRP bank0
  2009  0205  0800               	movf	0,w
  2010  0206  2400               	fcall	_lcd_print_char
  2011  0207  3001               	movlw	1
  2012  0208  1283               	bcf	3,5	;RP0=0, select bank0
  2013  0209  1303               	bcf	3,6	;RP1=0, select bank0
  2014  020A  00CD               	movwf	??_DisplayLcdScreen
  2015  020B  084D               	movf	??_DisplayLcdScreen,w
  2016  020C  07CE               	addwf	DisplayLcdScreen@i,f
  2017  020D  3010               	movlw	16
  2018  020E  024E               	subwf	DisplayLcdScreen@i,w
  2019  020F  1C03               	skipc
  2020  0210  2A01               	goto	l1832
  2021  0211                     l1838:	
  2022                           
  2023                           ;lcd.c: 148: lcd_set_cursor (1,0);
  2024  0211  01C9               	clrf	lcd_set_cursor@column
  2025  0212  3001               	movlw	1
  2026  0213  2342               	fcall	_lcd_set_cursor
  2027                           
  2028                           ;lcd.c: 149: for (i = 0; i<16; i++)
  2029  0214  1283               	bcf	3,5	;RP0=0, select bank0
  2030  0215  1303               	bcf	3,6	;RP1=0, select bank0
  2031  0216  01CE               	clrf	DisplayLcdScreen@i
  2032  0217                     L1:	
  2033  0217  3010               	movlw	16
  2034  0218  024E               	subwf	DisplayLcdScreen@i,w
  2035  0219  1803               	btfsc	3,0
  2036  021A  0008               	return
  2037                           
  2038                           ;lcd.c: 150: lcd_print_char(LcdScreen[1][i]);
  2039  021B  084E               	movf	DisplayLcdScreen@i,w
  2040  021C  3E30               	addlw	(low ((_LcdScreen| 0+16)))& (0+255)
  2041  021D  0084               	movwf	4
  2042  021E  1383               	bcf	3,7	;select IRP bank0
  2043  021F  0800               	movf	0,w
  2044  0220  2400               	fcall	_lcd_print_char
  2045  0221  3001               	movlw	1
  2046  0222  1283               	bcf	3,5	;RP0=0, select bank0
  2047  0223  1303               	bcf	3,6	;RP1=0, select bank0
  2048  0224  00CD               	movwf	??_DisplayLcdScreen
  2049  0225  084D               	movf	??_DisplayLcdScreen,w
  2050  0226  07CE               	addwf	DisplayLcdScreen@i,f
  2051  0227  2A17               	goto	L1
  2052  0228                     __end_of_DisplayLcdScreen:	
  2053                           
  2054                           	psect	text13
  2055  0342                     __ptext13:	
  2056 ;; *************** function _lcd_set_cursor *****************
  2057 ;; Defined at:
  2058 ;;		line 118 in file "lcd.c"
  2059 ;; Parameters:    Size  Location     Type
  2060 ;;  row             1    wreg     unsigned char 
  2061 ;;  column          1    7[BANK0 ] unsigned char 
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;  row             1    9[BANK0 ] unsigned char 
  2064 ;;  address         1   10[BANK0 ] unsigned char 
  2065 ;; Return value:  Size  Location     Type
  2066 ;;                  1    wreg      void 
  2067 ;; Registers used:
  2068 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2069 ;; Tracked objects:
  2070 ;;		On entry : 0/0
  2071 ;;		On exit  : 0/0
  2072 ;;		Unchanged: 0/0
  2073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2074 ;;      Params:         0       1       0       0
  2075 ;;      Locals:         0       2       0       0
  2076 ;;      Temps:          0       1       0       0
  2077 ;;      Totals:         0       4       0       0
  2078 ;;Total ram usage:        4 bytes
  2079 ;; Hardware stack levels used:    1
  2080 ;; Hardware stack levels required when called:    5
  2081 ;; This function calls:
  2082 ;;		_lcd_write_cmd
  2083 ;; This function is called by:
  2084 ;;		_DisplayLcdScreen
  2085 ;;		_lcd_clear
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           
  2090                           ;psect for function _lcd_set_cursor
  2091  0342                     _lcd_set_cursor:	
  2092                           
  2093                           ;incstack = 0
  2094                           ; Regs used in _lcd_set_cursor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2095                           ;lcd_set_cursor@row stored from wreg
  2096  0342  1283               	bcf	3,5	;RP0=0, select bank0
  2097  0343  1303               	bcf	3,6	;RP1=0, select bank0
  2098  0344  00CB               	movwf	lcd_set_cursor@row
  2099                           
  2100                           ;lcd.c: 120: unsigned char address;
  2101                           ;lcd.c: 122: switch(row)
  2102  0345  2B4D               	goto	l1786
  2103  0346                     l1780:	
  2104                           ;lcd.c: 123: {
  2105                           ;lcd.c: 124: case 0: address = 0x80; break;
  2106                           
  2107  0346  3080               	movlw	128
  2108  0347  2B49               	goto	L2
  2109  0348                     l1782:	
  2110                           ;lcd.c: 125: case 1: address = 0xC0; break;
  2111                           
  2112  0348  30C0               	movlw	192
  2113  0349                     L2:	
  2114  0349  00CA               	movwf	??_lcd_set_cursor
  2115  034A  084A               	movf	??_lcd_set_cursor,w
  2116  034B  00CC               	movwf	lcd_set_cursor@address
  2117                           
  2118                           ;lcd.c: 126: }
  2119  034C  2B55               	goto	l1788
  2120  034D                     l1786:	
  2121  034D  084B               	movf	lcd_set_cursor@row,w
  2122                           
  2123                           ; Switch size 1, requested type "space"
  2124                           ; Number of cases is 2, Range of values is 0 to 1
  2125                           ; switch strategies available:
  2126                           ; Name         Instructions Cycles
  2127                           ; simple_byte            7     4 (average)
  2128                           ; direct_byte            8     6 (fixed)
  2129                           ; jumptable            260     6 (fixed)
  2130                           ;	Chosen strategy is simple_byte
  2131  034E  3A00               	xorlw	0	; case 0
  2132  034F  1903               	skipnz
  2133  0350  2B46               	goto	l1780
  2134  0351  3A01               	xorlw	1	; case 1
  2135  0352  1903               	skipnz
  2136  0353  2B48               	goto	l1782
  2137  0354  2B55               	goto	l1788
  2138  0355                     l1788:	
  2139                           
  2140                           ;lcd.c: 127: address = address + column;
  2141  0355  0849               	movf	lcd_set_cursor@column,w
  2142  0356  074C               	addwf	lcd_set_cursor@address,w
  2143  0357  00CA               	movwf	??_lcd_set_cursor
  2144  0358  084A               	movf	??_lcd_set_cursor,w
  2145  0359  00CC               	movwf	lcd_set_cursor@address
  2146                           
  2147                           ;lcd.c: 128: lcd_write_cmd(address);
  2148  035A  084C               	movf	lcd_set_cursor@address,w
  2149  035B  235D               	fcall	_lcd_write_cmd
  2150  035C  0008               	return
  2151  035D                     __end_of_lcd_set_cursor:	
  2152                           
  2153                           	psect	text14
  2154  035D                     __ptext14:	
  2155 ;; *************** function _lcd_write_cmd *****************
  2156 ;; Defined at:
  2157 ;;		line 101 in file "lcd.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;  cmd             1    wreg     unsigned char 
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;  cmd             1    6[BANK0 ] unsigned char 
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2171 ;;      Params:         0       0       0       0
  2172 ;;      Locals:         0       1       0       0
  2173 ;;      Temps:          0       1       0       0
  2174 ;;      Totals:         0       2       0       0
  2175 ;;Total ram usage:        2 bytes
  2176 ;; Hardware stack levels used:    1
  2177 ;; Hardware stack levels required when called:    4
  2178 ;; This function calls:
  2179 ;;		_lcd_delay
  2180 ;;		_lcd_write_4bits
  2181 ;; This function is called by:
  2182 ;;		_lcd_set_cursor
  2183 ;;		_lcd_clear
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           
  2188                           ;psect for function _lcd_write_cmd
  2189  035D                     _lcd_write_cmd:	
  2190                           
  2191                           ;incstack = 0
  2192                           ; Regs used in _lcd_write_cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2193                           ;lcd_write_cmd@cmd stored from wreg
  2194  035D  1283               	bcf	3,5	;RP0=0, select bank0
  2195  035E  1303               	bcf	3,6	;RP1=0, select bank0
  2196  035F  00C8               	movwf	lcd_write_cmd@cmd
  2197                           
  2198                           ;lcd.c: 103: ( (0) ? ( PORTB |= (1<<2) ) : ( PORTB &= ~(1<<2) ) );
  2199  0360  30FB               	movlw	251
  2200  0361  00C7               	movwf	??_lcd_write_cmd
  2201  0362  0847               	movf	??_lcd_write_cmd,w
  2202  0363  0586               	andwf	6,f	;volatile
  2203                           
  2204                           ;lcd.c: 104: lcd_delay(1);
  2205  0364  3001               	movlw	1
  2206  0365  21BA               	fcall	_lcd_delay
  2207                           
  2208                           ;lcd.c: 105: lcd_write_4bits(cmd);
  2209  0366  1283               	bcf	3,5	;RP0=0, select bank0
  2210  0367  1303               	bcf	3,6	;RP1=0, select bank0
  2211  0368  0848               	movf	lcd_write_cmd@cmd,w
  2212  0369  23A8               	fcall	_lcd_write_4bits
  2213                           
  2214                           ;lcd.c: 106: lcd_write_4bits(cmd<<4);
  2215  036A  1283               	bcf	3,5	;RP0=0, select bank0
  2216  036B  1303               	bcf	3,6	;RP1=0, select bank0
  2217  036C  0848               	movf	lcd_write_cmd@cmd,w
  2218  036D  00C7               	movwf	??_lcd_write_cmd
  2219  036E  3003               	movlw	3
  2220  036F                     u1005:	
  2221  036F  1003               	clrc
  2222  0370  0DC7               	rlf	??_lcd_write_cmd,f
  2223  0371  3EFF               	addlw	-1
  2224  0372  1D03               	skipz
  2225  0373  2B6F               	goto	u1005
  2226  0374  1003               	clrc
  2227  0375  0D47               	rlf	??_lcd_write_cmd,w
  2228  0376  23A8               	fcall	_lcd_write_4bits
  2229  0377  0008               	return
  2230  0378                     __end_of_lcd_write_cmd:	
  2231                           
  2232                           	psect	text15
  2233  0400                     __ptext15:	
  2234 ;; *************** function _lcd_print_char *****************
  2235 ;; Defined at:
  2236 ;;		line 137 in file "lcd.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  c               1    wreg     unsigned char 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;  c               1    7[BANK0 ] unsigned char 
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      void 
  2243 ;; Registers used:
  2244 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2250 ;;      Params:         0       0       0       0
  2251 ;;      Locals:         0       1       0       0
  2252 ;;      Temps:          0       0       0       0
  2253 ;;      Totals:         0       1       0       0
  2254 ;;Total ram usage:        1 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    5
  2257 ;; This function calls:
  2258 ;;		_lcd_write_data
  2259 ;; This function is called by:
  2260 ;;		_DisplayLcdScreen
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           
  2265                           ;psect for function _lcd_print_char
  2266  0400                     _lcd_print_char:	
  2267                           
  2268                           ;incstack = 0
  2269                           ; Regs used in _lcd_print_char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2270                           ;lcd_print_char@c stored from wreg
  2271  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2272  0401  1303               	bcf	3,6	;RP1=0, select bank0
  2273  0402  00C9               	movwf	lcd_print_char@c
  2274                           
  2275                           ;lcd.c: 139: lcd_write_data (c);
  2276  0403  0849               	movf	lcd_print_char@c,w
  2277  0404  2324               	fcall	_lcd_write_data
  2278  0405  0008               	return
  2279  0406                     __end_of_lcd_print_char:	
  2280                           
  2281                           	psect	text16
  2282  0324                     __ptext16:	
  2283 ;; *************** function _lcd_write_data *****************
  2284 ;; Defined at:
  2285 ;;		line 109 in file "lcd.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  data            1    wreg     unsigned char 
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  data            1    6[BANK0 ] unsigned char 
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  1    wreg      void 
  2292 ;; Registers used:
  2293 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2299 ;;      Params:         0       0       0       0
  2300 ;;      Locals:         0       1       0       0
  2301 ;;      Temps:          0       1       0       0
  2302 ;;      Totals:         0       2       0       0
  2303 ;;Total ram usage:        2 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; Hardware stack levels required when called:    4
  2306 ;; This function calls:
  2307 ;;		_lcd_delay
  2308 ;;		_lcd_write_4bits
  2309 ;; This function is called by:
  2310 ;;		_lcd_print_char
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           
  2315                           ;psect for function _lcd_write_data
  2316  0324                     _lcd_write_data:	
  2317                           
  2318                           ;incstack = 0
  2319                           ; Regs used in _lcd_write_data: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2320                           ;lcd_write_data@data stored from wreg
  2321  0324  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0325  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0326  00C8               	movwf	lcd_write_data@data
  2324  0327  1506               	bsf	6,2	;volatile
  2325                           
  2326                           ;lcd.c: 112: lcd_delay(1);
  2327  0328  3001               	movlw	1
  2328  0329  21BA               	fcall	_lcd_delay
  2329                           
  2330                           ;lcd.c: 113: lcd_write_4bits(data);
  2331  032A  1283               	bcf	3,5	;RP0=0, select bank0
  2332  032B  1303               	bcf	3,6	;RP1=0, select bank0
  2333  032C  0848               	movf	lcd_write_data@data,w
  2334  032D  23A8               	fcall	_lcd_write_4bits
  2335                           
  2336                           ;lcd.c: 114: lcd_write_4bits(data<<4);
  2337  032E  1283               	bcf	3,5	;RP0=0, select bank0
  2338  032F  1303               	bcf	3,6	;RP1=0, select bank0
  2339  0330  0848               	movf	lcd_write_data@data,w
  2340  0331  00C7               	movwf	??_lcd_write_data
  2341  0332  3003               	movlw	3
  2342  0333                     u1015:	
  2343  0333  1003               	clrc
  2344  0334  0DC7               	rlf	??_lcd_write_data,f
  2345  0335  3EFF               	addlw	-1
  2346  0336  1D03               	skipz
  2347  0337  2B33               	goto	u1015
  2348  0338  1003               	clrc
  2349  0339  0D47               	rlf	??_lcd_write_data,w
  2350  033A  23A8               	fcall	_lcd_write_4bits
  2351                           
  2352                           ;lcd.c: 115: ( (0) ? ( PORTB |= (1<<2) ) : ( PORTB &= ~(1<<2) ) );
  2353  033B  30FB               	movlw	251
  2354  033C  1283               	bcf	3,5	;RP0=0, select bank0
  2355  033D  1303               	bcf	3,6	;RP1=0, select bank0
  2356  033E  00C7               	movwf	??_lcd_write_data
  2357  033F  0847               	movf	??_lcd_write_data,w
  2358  0340  0586               	andwf	6,f	;volatile
  2359  0341  0008               	return
  2360  0342                     __end_of_lcd_write_data:	
  2361                           
  2362                           	psect	text17
  2363  03A8                     __ptext17:	
  2364 ;; *************** function _lcd_write_4bits *****************
  2365 ;; Defined at:
  2366 ;;		line 92 in file "lcd.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;  dat             1    wreg     unsigned char 
  2369 ;; Auto vars:     Size  Location     Type
  2370 ;;  dat             1    6[COMMON] unsigned char 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  1    wreg      void 
  2373 ;; Registers used:
  2374 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2380 ;;      Params:         0       0       0       0
  2381 ;;      Locals:         1       0       0       0
  2382 ;;      Temps:          1       0       0       0
  2383 ;;      Totals:         2       0       0       0
  2384 ;;Total ram usage:        2 bytes
  2385 ;; Hardware stack levels used:    1
  2386 ;; Hardware stack levels required when called:    3
  2387 ;; This function calls:
  2388 ;;		_lcd_delay
  2389 ;; This function is called by:
  2390 ;;		_lcd_write_cmd
  2391 ;;		_lcd_write_data
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           
  2396                           ;psect for function _lcd_write_4bits
  2397  03A8                     _lcd_write_4bits:	
  2398                           
  2399                           ;incstack = 0
  2400                           ; Regs used in _lcd_write_4bits: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2401                           ;lcd_write_4bits@dat stored from wreg
  2402  03A8  00F6               	movwf	lcd_write_4bits@dat
  2403                           
  2404                           ;lcd.c: 95: PORTB &= 0x0F; PORTB |= (dat);;
  2405  03A9  300F               	movlw	15
  2406  03AA  00F5               	movwf	??_lcd_write_4bits
  2407  03AB  0875               	movf	??_lcd_write_4bits,w
  2408  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  2409  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  2410  03AE  0586               	andwf	6,f	;volatile
  2411                           
  2412                           ;lcd.c: 96: ( (1) ? ( PORTB |= (1<<3) ) : ( PORTB &= ~(1<<3) ) );
  2413  03AF  0876               	movf	lcd_write_4bits@dat,w
  2414  03B0  00F5               	movwf	??_lcd_write_4bits
  2415  03B1  0875               	movf	??_lcd_write_4bits,w
  2416  03B2  0486               	iorwf	6,f	;volatile
  2417  03B3  1586               	bsf	6,3	;volatile
  2418                           
  2419                           ;lcd.c: 97: lcd_delay(1);
  2420  03B4  3001               	movlw	1
  2421  03B5  21BA               	fcall	_lcd_delay
  2422                           
  2423                           ;lcd.c: 98: ( (0) ? ( PORTB |= (1<<3) ) : ( PORTB &= ~(1<<3) ) );
  2424  03B6  30F7               	movlw	247
  2425  03B7  00F5               	movwf	??_lcd_write_4bits
  2426  03B8  0875               	movf	??_lcd_write_4bits,w
  2427  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  2428  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  2429  03BB  0586               	andwf	6,f	;volatile
  2430                           
  2431                           ;lcd.c: 99: lcd_delay(1);
  2432  03BC  3001               	movlw	1
  2433  03BD  21BA               	fcall	_lcd_delay
  2434  03BE  0008               	return
  2435  03BF                     __end_of_lcd_write_4bits:	
  2436                           
  2437                           	psect	text18
  2438  01BA                     __ptext18:	
  2439 ;; *************** function _lcd_delay *****************
  2440 ;; Defined at:
  2441 ;;		line 10 in file "lcd.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;  time            1    wreg     unsigned char 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;  time            1    0[BANK0 ] unsigned char 
  2446 ;;  j               2    3[BANK0 ] int 
  2447 ;;  i               2    1[BANK0 ] int 
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      void 
  2450 ;; Registers used:
  2451 ;;		wreg, status,2, btemp+1
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2457 ;;      Params:         0       0       0       0
  2458 ;;      Locals:         0       5       0       0
  2459 ;;      Temps:          1       0       0       0
  2460 ;;      Totals:         1       5       0       0
  2461 ;;Total ram usage:        6 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    2
  2464 ;; This function calls:
  2465 ;;		Nothing
  2466 ;; This function is called by:
  2467 ;;		_lcd_write_4bits
  2468 ;;		_lcd_write_cmd
  2469 ;;		_lcd_write_data
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           
  2474                           ;psect for function _lcd_delay
  2475  01BA                     _lcd_delay:	
  2476                           
  2477                           ;incstack = 0
  2478                           ; Regs used in _lcd_delay: [wreg+status,2+btemp+1]
  2479                           ;lcd_delay@time stored from wreg
  2480  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  2481  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  2482  01BC  00C2               	movwf	lcd_delay@time
  2483                           
  2484                           ;lcd.c: 12: int i,j;
  2485                           ;lcd.c: 13: for(i=0;i<time;i++)
  2486  01BD  01C3               	clrf	lcd_delay@i
  2487  01BE  01C4               	clrf	lcd_delay@i+1
  2488  01BF                     l59:	
  2489  01BF  0844               	movf	lcd_delay@i+1,w
  2490  01C0  3A80               	xorlw	128
  2491  01C1  00F4               	movwf	??_lcd_delay
  2492  01C2  3080               	movlw	128
  2493  01C3  0274               	subwf	??_lcd_delay,w
  2494  01C4  1D03               	skipz
  2495  01C5  29C8               	goto	u955
  2496  01C6  0842               	movf	lcd_delay@time,w
  2497  01C7  0243               	subwf	lcd_delay@i,w
  2498  01C8                     u955:	
  2499  01C8  1803               	btfsc	3,0
  2500  01C9  0008               	return
  2501                           
  2502                           ;lcd.c: 14: for(j=0;j<1;j++);
  2503  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  2504  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  2505  01CC  01C5               	clrf	lcd_delay@j
  2506  01CD  01C6               	clrf	lcd_delay@j+1
  2507  01CE  0846               	movf	lcd_delay@j+1,w
  2508  01CF  3A80               	xorlw	128
  2509  01D0  00FF               	movwf	127
  2510  01D1  3080               	movlw	128
  2511  01D2  027F               	subwf	127,w
  2512  01D3  1D03               	skipz
  2513  01D4  29D7               	goto	u935
  2514  01D5  3001               	movlw	1
  2515  01D6  0245               	subwf	lcd_delay@j,w
  2516  01D7                     u935:	
  2517  01D7  1803               	btfsc	3,0
  2518  01D8  29EC               	goto	l1558
  2519  01D9                     l1554:	
  2520  01D9  3001               	movlw	1
  2521  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  2522  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  2523  01DC  07C5               	addwf	lcd_delay@j,f
  2524  01DD  1803               	skipnc
  2525  01DE  0AC6               	incf	lcd_delay@j+1,f
  2526  01DF  3000               	movlw	0
  2527  01E0  07C6               	addwf	lcd_delay@j+1,f
  2528  01E1  0846               	movf	lcd_delay@j+1,w
  2529  01E2  3A80               	xorlw	128
  2530  01E3  00FF               	movwf	127
  2531  01E4  3080               	movlw	128
  2532  01E5  027F               	subwf	127,w
  2533  01E6  1D03               	skipz
  2534  01E7  29EA               	goto	u945
  2535  01E8  3001               	movlw	1
  2536  01E9  0245               	subwf	lcd_delay@j,w
  2537  01EA                     u945:	
  2538  01EA  1C03               	skipc
  2539  01EB  29D9               	goto	l1554
  2540  01EC                     l1558:	
  2541  01EC  3001               	movlw	1
  2542  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  2543  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  2544  01EF  07C3               	addwf	lcd_delay@i,f
  2545  01F0  1803               	skipnc
  2546  01F1  0AC4               	incf	lcd_delay@i+1,f
  2547  01F2  3000               	movlw	0
  2548  01F3  07C4               	addwf	lcd_delay@i+1,f
  2549  01F4  29BF               	goto	l59
  2550  01F5                     __end_of_lcd_delay:	
  2551                           
  2552                           	psect	text19
  2553  0378                     __ptext19:	
  2554 ;; *************** function _ISR *****************
  2555 ;; Defined at:
  2556 ;;		line 12 in file "main.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;		None
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;		None
  2561 ;; Return value:  Size  Location     Type
  2562 ;;                  1    wreg      void 
  2563 ;; Registers used:
  2564 ;;		wreg, status,2, status,0, pclath, cstack
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2570 ;;      Params:         0       0       0       0
  2571 ;;      Locals:         0       0       0       0
  2572 ;;      Temps:          4       0       0       0
  2573 ;;      Totals:         4       0       0       0
  2574 ;;Total ram usage:        4 bytes
  2575 ;; Hardware stack levels used:    1
  2576 ;; Hardware stack levels required when called:    1
  2577 ;; This function calls:
  2578 ;;		_start_timer1
  2579 ;;		_stop_timer1
  2580 ;;		_timer1_isr
  2581 ;; This function is called by:
  2582 ;;		Interrupt level 1
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           
  2587                           ;psect for function _ISR
  2588  0378                     _ISR:	
  2589                           
  2590                           ;main.c: 13: if(TMR1IF == 1 && TMR1IE == 1){
  2591  0378  1C0C               	btfss	12,0	;volatile
  2592  0379  2B84               	goto	i1l38
  2593  037A  1683               	bsf	3,5	;RP0=1, select bank1
  2594  037B  1303               	bcf	3,6	;RP1=0, select bank1
  2595  037C  1C0C               	btfss	12,0	;volatile
  2596  037D  2B84               	goto	i1l38
  2597                           
  2598                           ;main.c: 14: stop_timer1();
  2599  037E  2406               	fcall	_stop_timer1
  2600                           
  2601                           ;main.c: 15: TMR1IF = 0;
  2602  037F  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0380  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0381  100C               	bcf	12,0	;volatile
  2605                           
  2606                           ;main.c: 16: start_timer1();
  2607  0382  23F8               	fcall	_start_timer1
  2608                           
  2609                           ;main.c: 17: timer1_isr();
  2610  0383  23D4               	fcall	_timer1_isr
  2611  0384                     i1l38:	
  2612  0384  0873               	movf	??_ISR+3,w
  2613  0385  1283               	bcf	3,5	;RP0=0, select bank0
  2614  0386  1303               	bcf	3,6	;RP1=0, select bank0
  2615  0387  00FF               	movwf	127
  2616  0388  0872               	movf	??_ISR+2,w
  2617  0389  008A               	movwf	10
  2618  038A  0871               	movf	??_ISR+1,w
  2619  038B  0084               	movwf	4
  2620  038C  0E70               	swapf	??_ISR^(0+-128),w
  2621  038D  0083               	movwf	3
  2622  038E  0EFE               	swapf	126,f
  2623  038F  0E7E               	swapf	126,w
  2624  0390  0009               	retfie
  2625  0391                     __end_of_ISR:	
  2626                           
  2627                           	psect	intentry
  2628  0004                     __pintentry:	
  2629                           ;incstack = 0
  2630                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2631                           
  2632  0004                     interrupt_function:	
  2633  007E                     saved_w	set	btemp
  2634  0004  00FE               	movwf	btemp
  2635  0005  0E03               	swapf	3,w
  2636  0006  00F0               	movwf	??_ISR
  2637  0007  0804               	movf	4,w
  2638  0008  00F1               	movwf	??_ISR+1
  2639  0009  080A               	movf	10,w
  2640  000A  00F2               	movwf	??_ISR+2
  2641  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2642  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2643  000D  087F               	movf	btemp+1,w
  2644  000E  00F3               	movwf	??_ISR+3
  2645  000F  2B78               	ljmp	_ISR
  2646                           
  2647                           	psect	text20
  2648  03D4                     __ptext20:	
  2649 ;; *************** function _timer1_isr *****************
  2650 ;; Defined at:
  2651 ;;		line 36 in file "timer.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;		None
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;		None
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      void 
  2658 ;; Registers used:
  2659 ;;		wreg, status,2
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2665 ;;      Params:         0       0       0       0
  2666 ;;      Locals:         0       0       0       0
  2667 ;;      Temps:          0       0       0       0
  2668 ;;      Totals:         0       0       0       0
  2669 ;;Total ram usage:        0 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_ISR
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           
  2679                           ;psect for function _timer1_isr
  2680  03D4                     _timer1_isr:	
  2681                           
  2682                           ;timer.c: 38: timer1_cnt ++;
  2683                           
  2684                           ;incstack = 0
  2685                           ; Regs used in _timer1_isr: [wreg+status,2]
  2686  03D4  3001               	movlw	1
  2687  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  2688  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  2689  03D7  07D2               	addwf	_timer1_cnt,f
  2690  03D8  1803               	skipnc
  2691  03D9  0AD3               	incf	_timer1_cnt+1,f
  2692  03DA  3000               	movlw	0
  2693  03DB  07D3               	addwf	_timer1_cnt+1,f
  2694                           
  2695                           ;timer.c: 39: if (timer1_cnt >= time1_MUL)
  2696  03DC  0841               	movf	_time1_MUL+1,w
  2697  03DD  0253               	subwf	_timer1_cnt+1,w
  2698  03DE  1D03               	skipz
  2699  03DF  2BE2               	goto	u58_25
  2700  03E0  0840               	movf	_time1_MUL,w
  2701  03E1  0252               	subwf	_timer1_cnt,w
  2702  03E2                     u58_25:	
  2703  03E2  1C03               	skipc
  2704  03E3  0008               	return
  2705                           
  2706                           ;timer.c: 40: {
  2707                           ;timer.c: 41: timer1_cnt = 0;
  2708  03E4  01D2               	clrf	_timer1_cnt
  2709  03E5  01D3               	clrf	_timer1_cnt+1
  2710                           
  2711                           ;timer.c: 42: flag_timer1 = 1;
  2712  03E6  01F9               	clrf	_flag_timer1
  2713  03E7  0AF9               	incf	_flag_timer1,f
  2714  03E8  0008               	return
  2715  03E9                     __end_of_timer1_isr:	
  2716                           
  2717                           	psect	text21
  2718  0406                     __ptext21:	
  2719 ;; *************** function _stop_timer1 *****************
  2720 ;; Defined at:
  2721 ;;		line 32 in file "timer.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;		None
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		None
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2735 ;;      Params:         0       0       0       0
  2736 ;;      Locals:         0       0       0       0
  2737 ;;      Temps:          0       0       0       0
  2738 ;;      Totals:         0       0       0       0
  2739 ;;Total ram usage:        0 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; This function calls:
  2742 ;;		Nothing
  2743 ;; This function is called by:
  2744 ;;		_ISR
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           
  2749                           ;psect for function _stop_timer1
  2750  0406                     _stop_timer1:	
  2751                           
  2752                           ;timer.c: 34: T1CONbits.TMR1ON = 0;
  2753                           
  2754                           ;incstack = 0
  2755                           ; Regs used in _stop_timer1: []
  2756  0406  1283               	bcf	3,5	;RP0=0, select bank0
  2757  0407  1303               	bcf	3,6	;RP1=0, select bank0
  2758  0408  1010               	bcf	16,0	;volatile
  2759  0409  0008               	return
  2760  040A                     __end_of_stop_timer1:	
  2761                           
  2762                           	psect	text22
  2763  03F8                     __ptext22:	
  2764 ;; *************** function _start_timer1 *****************
  2765 ;; Defined at:
  2766 ;;		line 26 in file "timer.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2780 ;;      Params:         0       0       0       0
  2781 ;;      Locals:         0       0       0       0
  2782 ;;      Temps:          0       0       0       0
  2783 ;;      Totals:         0       0       0       0
  2784 ;;Total ram usage:        0 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; This function calls:
  2787 ;;		Nothing
  2788 ;; This function is called by:
  2789 ;;		_ISR
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           
  2794                           ;psect for function _start_timer1
  2795  03F8                     _start_timer1:	
  2796                           
  2797                           ;timer.c: 28: TMR1 = timer1_value;
  2798                           
  2799                           ;incstack = 0
  2800                           ; Regs used in _start_timer1: [wreg]
  2801  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  2802  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  2803  03FA  0855               	movf	_timer1_value+1,w
  2804  03FB  008F               	movwf	15	;volatile
  2805  03FC  0854               	movf	_timer1_value,w
  2806  03FD  008E               	movwf	14	;volatile
  2807                           
  2808                           ;timer.c: 29: T1CONbits.TMR1ON = 1;
  2809  03FE  1410               	bsf	16,0	;volatile
  2810  03FF  0008               	return
  2811  0400                     __end_of_start_timer1:	
  2812  007E                     btemp	set	126	;btemp
  2813  007E                     wtemp	set	126
  2814  007E                     wtemp0	set	126
  2815  0080                     wtemp1	set	128
  2816  0082                     wtemp2	set	130
  2817  0084                     wtemp3	set	132
  2818  0086                     wtemp4	set	134
  2819  0088                     wtemp5	set	136
  2820  007F                     wtemp6	set	127
  2821  007E                     ttemp	set	126
  2822  007E                     ttemp0	set	126
  2823  0081                     ttemp1	set	129
  2824  0084                     ttemp2	set	132
  2825  0087                     ttemp3	set	135
  2826  007F                     ttemp4	set	127
  2827  007E                     ltemp	set	126
  2828  007E                     ltemp0	set	126
  2829  0082                     ltemp1	set	130
  2830  0086                     ltemp2	set	134
  2831  0080                     ltemp3	set	128


Data Sizes:
    Strings     34
    Constant    0
    Data        34
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     14      54
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    LcdPrintStringS@string	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_LcdPrintCharS
    _main->_LcdPrintStringS
    _init_lcd->_lcd_send_command
    _SetTimer1_ms->___awdiv
    _LcdPrintStringS->_lcd_print_charS
    _lcd_write_cmd->_lcd_write_4bits
    _lcd_write_data->_lcd_write_4bits
    _lcd_write_4bits->_lcd_delay

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_DisplayLcdScreen
    _init_system->_init_lcd
    _init_lcd->_v_timer0
    _lcd_send_command->_v_timer0
    _SetTimer1_ms->___awdiv
    _LcdPrintStringS->_lcd_print_charS
    _DisplayLcdScreen->_lcd_set_cursor
    _lcd_set_cursor->_lcd_write_cmd
    _lcd_write_cmd->_lcd_delay
    _lcd_print_char->_lcd_write_data
    _lcd_write_data->_lcd_delay
    _lcd_write_4bits->_lcd_delay

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    4719
                                             13 BANK0      1     1      0
                   _DisplayLcdScreen
                      _LcdPrintCharS
                    _LcdPrintStringS
                        _init_system
 ---------------------------------------------------------------------------------
 (1) _init_system                                          0     0      0    2791
                       _SetTimer1_ms
                     _init_interrupt
                           _init_lcd
                        _init_timer1
 ---------------------------------------------------------------------------------
 (2) _init_timer1                                          4     2      2      96
                                              4 COMMON     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _init_lcd                                             1     1      0    2024
                                             12 BANK0      1     1      0
                   _lcd_send_command
                           _v_timer0
 ---------------------------------------------------------------------------------
 (3) _lcd_send_command                                     3     3      0    1043
                                              4 COMMON     3     3      0
                           _v_timer0
 ---------------------------------------------------------------------------------
 (3) _v_timer0                                            12     8      4     981
                                              0 BANK0     12     8      4
 ---------------------------------------------------------------------------------
 (2) _init_interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetTimer1_ms                                         2     0      2     671
                                              8 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     575
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _LcdPrintStringS                                      5     3      2     418
                                              5 COMMON     2     2      0
                                              4 BANK0      3     1      2
                    _lcd_print_charS
 ---------------------------------------------------------------------------------
 (2) _lcd_print_charS                                      5     5      0      31
                                              4 COMMON     1     1      0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _LcdPrintCharS                                        7     5      2     223
                                              4 COMMON     3     1      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DisplayLcdScreen                                     2     2      0    1287
                                             11 BANK0      2     2      0
                     _lcd_print_char
                     _lcd_set_cursor
 ---------------------------------------------------------------------------------
 (2) _lcd_set_cursor                                       4     3      1     693
                                              7 BANK0      4     3      1
                      _lcd_write_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_write_cmd                                        2     2      0     365
                                              5 BANK0      2     2      0
                          _lcd_delay
                    _lcd_write_4bits
 ---------------------------------------------------------------------------------
 (2) _lcd_print_char                                       1     1      0     396
                                              7 BANK0      1     1      0
                     _lcd_write_data
 ---------------------------------------------------------------------------------
 (3) _lcd_write_data                                       2     2      0     365
                                              5 BANK0      2     2      0
                          _lcd_delay
                    _lcd_write_4bits
 ---------------------------------------------------------------------------------
 (4) _lcd_write_4bits                                      2     2      0     167
                                              5 COMMON     2     2      0
                          _lcd_delay
 ---------------------------------------------------------------------------------
 (5) _lcd_delay                                            6     6      0     136
                                              4 COMMON     1     1      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                       _start_timer1
                        _stop_timer1
                         _timer1_isr
 ---------------------------------------------------------------------------------
 (7) _timer1_isr                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _stop_timer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _start_timer1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DisplayLcdScreen
     _lcd_print_char
       _lcd_write_data
         _lcd_delay
         _lcd_write_4bits
           _lcd_delay
     _lcd_set_cursor
       _lcd_write_cmd
         _lcd_delay
         _lcd_write_4bits
           _lcd_delay
   _LcdPrintCharS
   _LcdPrintStringS
     _lcd_print_charS
   _init_system
     _SetTimer1_ms
       ___awdiv
     _init_interrupt
     _init_lcd
       _lcd_send_command
         _v_timer0
       _v_timer0
     _init_timer1

 _ISR (ROOT)
   _start_timer1
   _stop_timer1
   _timer1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      E      36       3       67.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      40      10        0.0%
ABS                  0      0      40       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Sat Dec 10 23:04:23 2022

    __size_of_start_timer1 0008                          pc 0002                __CFG_CP$OFF 0000  
         ??_init_interrupt 0074                         l59 01BF                         l67 0178  
             ___awdiv@sign 0047                         fsr 0004                        _GIE 005F  
             __CFG_CPD$OFF 0000                        _ISR 0378                        u935 01D7  
                      u945 01EA                        u955 01C8                        u965 019C  
                      u975 01AF                        u985 018F                        u995 0150  
                      fsr0 0004                        indf 0000              lcd_delay@time 0042  
          ?_lcd_set_cursor 0049               __CFG_LVP$OFF 0000                       ?_ISR 0070  
                     l1640 00D3                       l1554 01D9                       l1572 01B1  
                     l1558 01EC                       l1822 028C                       l1646 00DE  
                     l1832 0201                       l1672 011D                       l1664 010A  
                     l1656 00E6                       l1568 019E                       l1658 00F4  
                     l1780 0346                       l1668 0115                       l1860 02BA  
                     l1782 0348                       l1838 0211                       l1786 034D  
                     l1788 0355                       STR_1 0257                       STR_2 0268  
                     u1005 036F                       u1015 0333                       u1125 030D  
                     u1135 0240                       u1055 00E9                       u1075 00F5  
                     u1085 0101                       u1095 010B                       _PEIE 005E  
                     i1l38 0384                       _TMR1 000E     __end_of_lcd_write_data 0342  
                     _main 029D                       btemp 007E               _start_timer1 03F8  
                     ltemp 007E             ?_lcd_write_cmd 0070                       start 0010  
                     ttemp 007E            ?_lcd_print_char 0070                       wtemp 007E  
              _stop_timer1 0406                      ??_ISR 0070                      ?_main 0070  
          __end_of___awdiv 0122              __CFG_WDTE$OFF 0000                      _CMCON 001F  
          ___awdiv@divisor 0042    __end_of_lcd_write_4bits 03BF            ___awdiv@counter 0046  
        ?_lcd_send_command 0070                      _PORTB 0006                      _TRISB 0086  
                    u58_25 03E2           lcd_write_cmd@cmd 0048               ?_init_timer1 0074  
       ??_lcd_send_command 0074               ?_init_system 0070             __CFG_BOREN$OFF 0000  
                    pclath 000A                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080            ?_lcd_write_data 0070  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F           ?_lcd_print_charS 0070             __CFG_MCLRE$OFF 0000  
          __initialization 0011               __end_of_main 02C0                     ??_main 004F  
         ___awdiv@dividend 0044             LcdPrintCharS@c 0075             LcdPrintCharS@x 0076  
           LcdPrintCharS@y 0074                     _TMR1IE 0460                     _TMR1IF 0060  
          ??_lcd_write_cmd 0047         lcd_write_4bits@dat 0076      __end_of_LcdPrintCharS 0251  
           __CFG_PWRTE$OFF 0000                  ??___awdiv 0074  __size_of_DisplayLcdScreen 0033  
         __end_of_init_lcd 00C7           ___awdiv@quotient 0048           ?_lcd_write_4bits 0070  
         __end_of_v_timer0 01BA                     saved_w 007E    __end_of__initialization 0024  
            ?_SetTimer1_ms 004A             __pcstackCOMMON 0070   __size_of_LcdPrintStringS 0024  
             __pidataBANK0 02E3           ??_lcd_set_cursor 004A         __size_of_lcd_delay 003B  
     lcd_set_cursor@column 0049       __size_of_init_timer1 0023                 __pbssBANK0 0050  
         ??_lcd_print_char 0077       __size_of_init_system 0017             ??_SetTimer1_ms 0075  
               __pmaintext 029D               ?_stop_timer1 0070                 __pintentry 0004  
         init_timer1@count 0074           ??_lcd_write_data 0047                 __stringtab 0251  
       lcd_write_data@data 0048                  ?_init_lcd 0070      LcdPrintStringS@string 0047  
__size_of_lcd_send_command 0052          __end_of_lcd_delay 01F5                  ?_v_timer0 0042  
                  ___awdiv 00C7           _DisplayLcdScreen 01F5                    __ptext1 0391  
                  __ptext2 02C0                    __ptext3 0026                    __ptext4 0122  
                  __ptext5 0174                    __ptext6 040A                    __ptext7 03BF  
                  __ptext8 00C7                    __ptext9 0279          ??_LcdPrintStringS 0075  
             __size_of_ISR 0019                  _T1CONbits 0010    __size_of_init_interrupt 0003  
     end_of_initialization 0024                 ??_init_lcd 004E                 ??_v_timer0 0046  
               _timer1_cnt 0052                 _timer1_isr 03D4   __size_of_lcd_print_charS 001F  
     __end_of_SetTimer1_ms 03D4                 lcd_delay@i 0043                 lcd_delay@j 0045  
    __end_of_lcd_write_cmd 0378           SetTimer1_ms@time 004A                  _LcdScreen 0020  
     __size_of_stop_timer1 0004     __size_of_LcdPrintCharS 0029        start_initialization 0011  
              __end_of_ISR 0391   __size_of_lcd_write_4bits 0017              ?_start_timer1 0070  
         _lcd_send_command 0122      lcd_set_cursor@address 004C                ?_timer1_isr 0070  
               init_fetch0 03E9                __pdataBANK0 0020          ??_lcd_print_charS 0042  
            ??_init_timer1 0042                __pbssCOMMON 0077                  ___latbits 0000  
            __pcstackBANK0 0042             _init_interrupt 040A           lcd_print_charS@c 0074  
            ??_init_system 0077   __end_of_DisplayLcdScreen 0228             ??_start_timer1 0070  
            _LcdPrintCharS 0228          __size_of_init_lcd 00A1            _LcdPrintStringS 0279  
                 ?___awdiv 0042          __size_of_v_timer0 0046                  _lcd_delay 01BA  
      lcd_send_command@cmd 0076      __size_of_SetTimer1_ms 0015                  __pstrings 0251  
   __end_of_init_interrupt 040D                _flag_timer1 0079        __size_of_timer1_isr 0015  
      __end_of_init_timer1 02E3    __size_of_lcd_set_cursor 001B          interrupt_function 0004  
      __end_of_init_system 03A8                  _time1_MUL 0040             ?_LcdPrintCharS 0074  
        ??_lcd_write_4bits 0075               _SetTimer1_ms 03BF                   _PCONbits 008E  
  __size_of_lcd_print_char 0006                 ?_lcd_delay 0070                __stringbase 0256  
          ?_init_interrupt 0070    __end_of_LcdPrintStringS 029D    __size_of_lcd_write_data 001E  
         __size_of___awdiv 005B            lcd_print_char@c 0049         __end_of__stringtab 0257  
     __end_of_start_timer1 0400   __end_of_lcd_send_command 0174           LcdPrintStringS@x 0048  
         LcdPrintStringS@y 0046                _current_col 0050                _current_row 0077  
              _init_timer1 02C0                   __ptext10 0305                   __ptext11 0228  
                 __ptext20 03D4                   __ptext12 01F5                   __ptext21 0406  
                 __ptext13 0342                   __ptext22 03F8                   __ptext14 035D  
                 __ptext15 0400                   __ptext16 0324                   __ptext17 03A8  
                 __ptext18 01BA                   __ptext19 0378                _init_system 0391  
          ??_LcdPrintCharS 0042                   _init_lcd 0026              __size_of_main 0023  
                v_timer0@i 004A                  v_timer0@j 004C              ??_stop_timer1 0070  
          _lcd_print_charS 0305                   _v_timer0 0174               ??_timer1_isr 0070  
              ??_lcd_delay 0074               _timer1_value 0054                 _INTCONbits 000B  
   __size_of_lcd_write_cmd 001B                   init_ram0 03ED          ?_DisplayLcdScreen 0070  
                 intlevel1 0000             _lcd_set_cursor 0342         __end_of_timer1_isr 03E9  
        lcd_set_cursor@row 004B           ?_LcdPrintStringS 0046         ??_DisplayLcdScreen 004D  
             v_timer0@time 0042                  stringcode 0251             _lcd_print_char 0400  
        DisplayLcdScreen@i 004E        __end_of_stop_timer1 040A                   stringdir 0251  
                 stringtab 0251     __end_of_lcd_set_cursor 035D            _lcd_write_4bits 03A8  
       __CFG_FOSC$INTOSCIO 0000    __end_of_lcd_print_charS 0324             _lcd_write_data 0324  
   __end_of_lcd_print_char 0406              _lcd_write_cmd 035D  
